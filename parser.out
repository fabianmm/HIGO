Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> PROGRAM
Rule 1     PROGRAM -> SEM_CODE_STARTS DECLARATIONS FUNCTIONS program id SEM_PROGRAM_STARTS BLOCK SEM_FILL_ERAS SEM_PROGRAM_END
Rule 2     DECLARATIONS -> VARDEC DECLARATIONS
Rule 3     DECLARATIONS -> LISTDEC DECLARATIONS
Rule 4     DECLARATIONS -> empty
Rule 5     VARDEC -> var TYPE VARIDS semicolon
Rule 6     VARIDS -> id SEM_ADD_VAR
Rule 7     VARIDS -> id SEM_ADD_VAR comma VARIDS
Rule 8     LISTDEC -> list TYPE LISTIDS semicolon
Rule 9     LISTIDS -> id SEM_ADD_LIST
Rule 10    LISTIDS -> id SEM_ADD_LIST comma LISTIDS
Rule 11    TYPE -> int SEM_STORE_TYPE
Rule 12    TYPE -> decimal SEM_STORE_TYPE
Rule 13    TYPE -> bool SEM_STORE_TYPE
Rule 14    FUNCTIONS -> FUNCTION FUNCTIONS
Rule 15    FUNCTIONS -> empty
Rule 16    FUNCTION -> function FUNCTYPE id SEM_ADD_FUNC lp FUNCPARAMETERS rp lk DECLARATIONS SEM_ADD_FUNC_START STATEMENTS rk SEM_END_FUNC
Rule 17    FUNCTYPE -> void SEM_STORE_TYPE
Rule 18    FUNCTYPE -> TYPE
Rule 19    FUNCPARAMETERS -> TYPE id SEM_ADD_PARAM
Rule 20    FUNCPARAMETERS -> TYPE id SEM_ADD_PARAM comma FUNCPARAMETERS
Rule 21    FUNCPARAMETERS -> empty
Rule 22    BLOCK -> lk STATEMENTS rk
Rule 23    STATEMENTS -> STATEMENT STATEMENTS
Rule 24    STATEMENTS -> empty
Rule 25    STATEMENT -> ASSIGN
Rule 26    STATEMENT -> READ
Rule 27    STATEMENT -> PRINT
Rule 28    STATEMENT -> FUNCCALL
Rule 29    STATEMENT -> CONDITION
Rule 30    STATEMENT -> LOOP
Rule 31    STATEMENT -> RETURN
Rule 32    STATEMENT -> LISTADD
Rule 33    STATEMENT -> LISTREMOVE
Rule 34    ASSIGN -> id SEM_PUSH_OPERAND LISTINDEX equal SEM_PUSH_OPERATOR EXPRESSION SEM_ASSIGN semicolon
Rule 35    LISTINDEX -> lb EXP rb SEM_LIST_INDEX
Rule 36    LISTINDEX -> empty
Rule 37    READ -> readto SEM_PUSH_OPERATOR lp id SEM_PUSH_OPERAND SEM_GEN_READ rp semicolon
Rule 38    PRINT -> print SEM_PUSH_OPERATOR lp EXPRESSION rp SEM_PRINT semicolon
Rule 39    FUNCCALL -> id SEM_VERIFY_FUNC lp SEM_GEN_ERA CALLPARAMETERS rp SEM_VERIFY_NUM_PARAMS semicolon SEM_GEN_GOSUB
Rule 40    CALLPARAMETERS -> EXPRESSION SEM_MATCH_PARAM
Rule 41    CALLPARAMETERS -> EXPRESSION SEM_MATCH_PARAM comma CALLPARAMETERS
Rule 42    CALLPARAMETERS -> empty
Rule 43    CONDITION -> if lp EXPRESSION rp SEM_GEN_GOTOF BLOCK ELSEBLOCK SEM_FILL_END
Rule 44    ELSEBLOCK -> else SEM_GENANDFILL_GOTO BLOCK
Rule 45    ELSEBLOCK -> empty
Rule 46    LOOP -> while SEM_PUSH_START lp EXPRESSION rp SEM_GEN_GOTOF BLOCK SEM_FILL_LOOP
Rule 47    RETURN -> return EXPRESSION SEM_RETURN semicolon
Rule 48    EXPRESSION -> NOT SUPEREXP SEM_RESOLVE_NOT
Rule 49    EXPRESSION -> NOT SUPEREXP SEM_RESOLVE_NOT and SEM_PUSH_OPERATOR NOT SUPEREXP SEM_RESOLVE_NOT SEM_RESOLVE_ANDOR
Rule 50    EXPRESSION -> NOT SUPEREXP SEM_RESOLVE_NOT or SEM_PUSH_OPERATOR NOT SUPEREXP SEM_RESOLVE_NOT SEM_RESOLVE_ANDOR
Rule 51    NOT -> not SEM_PUSH_OPERATOR
Rule 52    NOT -> empty
Rule 53    SUPEREXP -> EXP
Rule 54    SUPEREXP -> EXP RELOP EXP SEM_RESOLVE_RELOP
Rule 55    RELOP -> gt SEM_PUSH_OPERATOR
Rule 56    RELOP -> ge SEM_PUSH_OPERATOR
Rule 57    RELOP -> lt SEM_PUSH_OPERATOR
Rule 58    RELOP -> le SEM_PUSH_OPERATOR
Rule 59    RELOP -> ee SEM_PUSH_OPERATOR
Rule 60    RELOP -> ne SEM_PUSH_OPERATOR
Rule 61    EXP -> TERM SEM_RESOLVE_PLUSMINUS
Rule 62    EXP -> TERM SEM_RESOLVE_PLUSMINUS plus SEM_PUSH_OPERATOR EXP
Rule 63    EXP -> TERM SEM_RESOLVE_PLUSMINUS minus SEM_PUSH_OPERATOR EXP
Rule 64    TERM -> FACTOR SEM_RESOLVE_TIMESDIVIDE
Rule 65    TERM -> FACTOR SEM_RESOLVE_TIMESDIVIDE times SEM_PUSH_OPERATOR TERM
Rule 66    TERM -> FACTOR SEM_RESOLVE_TIMESDIVIDE divide SEM_PUSH_OPERATOR TERM
Rule 67    FACTOR -> lp SEM_PUSH_PAREN EXPRESSION rp SEM_POP_PAREN
Rule 68    FACTOR -> CONSTANT
Rule 69    FACTOR -> plus CONSTANT
Rule 70    FACTOR -> minus CONSTANT
Rule 71    CONSTANT -> id SEM_PUSH_OPERAND LISTINDEX
Rule 72    CONSTANT -> id SEM_VERIFY_FUNC lp SEM_PUSH_PAREN SEM_GEN_ERA CALLPARAMETERS rp SEM_POP_PAREN SEM_VERIFY_NUM_PARAMS SEM_GEN_GOSUB_ASSIGN
Rule 73    CONSTANT -> c_int SEM_PUSH_CONSTANT
Rule 74    CONSTANT -> c_decimal SEM_PUSH_CONSTANT
Rule 75    CONSTANT -> c_string SEM_PUSH_CONSTANT
Rule 76    CONSTANT -> false SEM_PUSH_CONSTANT
Rule 77    CONSTANT -> true SEM_PUSH_CONSTANT
Rule 78    LISTADD -> id SEM_PUSH_OPERAND dot add lp EXP rp SEM_ADD_TO_LIST semicolon
Rule 79    LISTREMOVE -> id SEM_PUSH_OPERAND LISTINDEX dot remove semicolon SEM_REMOVE_FROM_LIST
Rule 80    empty -> <empty>
Rule 81    SEM_CODE_STARTS -> empty
Rule 82    SEM_PROGRAM_STARTS -> empty
Rule 83    SEM_STORE_TYPE -> empty
Rule 84    SEM_ADD_FUNC -> empty
Rule 85    SEM_END_FUNC -> empty
Rule 86    SEM_GEN_READ -> empty
Rule 87    SEM_ADD_VAR -> empty
Rule 88    SEM_PUSH_OPERAND -> empty
Rule 89    SEM_PUSH_OPERATOR -> empty
Rule 90    SEM_RESOLVE_PLUSMINUS -> empty
Rule 91    SEM_RESOLVE_TIMESDIVIDE -> empty
Rule 92    SEM_PUSH_PAREN -> empty
Rule 93    SEM_POP_PAREN -> empty
Rule 94    SEM_ASSIGN -> empty
Rule 95    SEM_PUSH_CONSTANT -> empty
Rule 96    SEM_PRINT -> empty
Rule 97    SEM_RESOLVE_RELOP -> empty
Rule 98    SEM_RESOLVE_ANDOR -> empty
Rule 99    SEM_RESOLVE_NOT -> empty
Rule 100   SEM_GEN_GOTOF -> empty
Rule 101   SEM_GENANDFILL_GOTO -> empty
Rule 102   SEM_FILL_END -> empty
Rule 103   SEM_PUSH_START -> empty
Rule 104   SEM_FILL_LOOP -> empty
Rule 105   SEM_ADD_PARAM -> empty
Rule 106   SEM_ADD_FUNC_START -> empty
Rule 107   SEM_VERIFY_FUNC -> empty
Rule 108   SEM_GEN_ERA -> empty
Rule 109   SEM_MATCH_PARAM -> empty
Rule 110   SEM_VERIFY_NUM_PARAMS -> empty
Rule 111   SEM_GEN_GOSUB -> empty
Rule 112   SEM_GEN_GOSUB_ASSIGN -> empty
Rule 113   SEM_RETURN -> empty
Rule 114   SEM_PROGRAM_END -> empty
Rule 115   SEM_FILL_ERAS -> empty
Rule 116   SEM_ADD_LIST -> empty
Rule 117   SEM_LIST_INDEX -> empty
Rule 118   SEM_ADD_TO_LIST -> empty
Rule 119   SEM_REMOVE_FROM_LIST -> empty

Terminals, with rules where they appear

add                  : 78
and                  : 49
bool                 : 13
c_decimal            : 74
c_int                : 73
c_string             : 75
comma                : 7 10 20 41
decimal              : 12
divide               : 66
dot                  : 78 79
ee                   : 59
else                 : 44
equal                : 34
error                : 
false                : 76
function             : 16
ge                   : 56
gt                   : 55
id                   : 1 6 7 9 10 16 19 20 34 37 39 71 72 78 79
if                   : 43
int                  : 11
lb                   : 35
le                   : 58
list                 : 8
lk                   : 16 22
lp                   : 16 37 38 39 43 46 67 72 78
lt                   : 57
minus                : 63 70
ne                   : 60
not                  : 51
or                   : 50
plus                 : 62 69
print                : 38
program              : 1
rb                   : 35
readto               : 37
remove               : 79
return               : 47
rk                   : 16 22
rp                   : 16 37 38 39 43 46 67 72 78
semicolon            : 5 8 34 37 38 39 47 78 79
times                : 65
true                 : 77
var                  : 5
void                 : 17
while                : 46

Nonterminals, with rules where they appear

ASSIGN               : 25
BLOCK                : 1 43 44 46
CALLPARAMETERS       : 39 41 72
CONDITION            : 29
CONSTANT             : 68 69 70
DECLARATIONS         : 1 2 3 16
ELSEBLOCK            : 43
EXP                  : 35 53 54 54 62 63 78
EXPRESSION           : 34 38 40 41 43 46 47 67
FACTOR               : 64 65 66
FUNCCALL             : 28
FUNCPARAMETERS       : 16 20
FUNCTION             : 14
FUNCTIONS            : 1 14
FUNCTYPE             : 16
LISTADD              : 32
LISTDEC              : 3
LISTIDS              : 8 10
LISTINDEX            : 34 71 79
LISTREMOVE           : 33
LOOP                 : 30
NOT                  : 48 49 49 50 50
PRINT                : 27
PROGRAM              : 0
READ                 : 26
RELOP                : 54
RETURN               : 31
SEM_ADD_FUNC         : 16
SEM_ADD_FUNC_START   : 16
SEM_ADD_LIST         : 9 10
SEM_ADD_PARAM        : 19 20
SEM_ADD_TO_LIST      : 78
SEM_ADD_VAR          : 6 7
SEM_ASSIGN           : 34
SEM_CODE_STARTS      : 1
SEM_END_FUNC         : 16
SEM_FILL_END         : 43
SEM_FILL_ERAS        : 1
SEM_FILL_LOOP        : 46
SEM_GENANDFILL_GOTO  : 44
SEM_GEN_ERA          : 39 72
SEM_GEN_GOSUB        : 39
SEM_GEN_GOSUB_ASSIGN : 72
SEM_GEN_GOTOF        : 43 46
SEM_GEN_READ         : 37
SEM_LIST_INDEX       : 35
SEM_MATCH_PARAM      : 40 41
SEM_POP_PAREN        : 67 72
SEM_PRINT            : 38
SEM_PROGRAM_END      : 1
SEM_PROGRAM_STARTS   : 1
SEM_PUSH_CONSTANT    : 73 74 75 76 77
SEM_PUSH_OPERAND     : 34 37 71 78 79
SEM_PUSH_OPERATOR    : 34 37 38 49 50 51 55 56 57 58 59 60 62 63 65 66
SEM_PUSH_PAREN       : 67 72
SEM_PUSH_START       : 46
SEM_REMOVE_FROM_LIST : 79
SEM_RESOLVE_ANDOR    : 49 50
SEM_RESOLVE_NOT      : 48 49 49 50 50
SEM_RESOLVE_PLUSMINUS : 61 62 63
SEM_RESOLVE_RELOP    : 54
SEM_RESOLVE_TIMESDIVIDE : 64 65 66
SEM_RETURN           : 47
SEM_STORE_TYPE       : 11 12 13 17
SEM_VERIFY_FUNC      : 39 72
SEM_VERIFY_NUM_PARAMS : 39 72
STATEMENT            : 23
STATEMENTS           : 16 22 23
SUPEREXP             : 48 49 49 50 50
TERM                 : 61 62 63 65 66
TYPE                 : 5 8 18 19 20
VARDEC               : 2
VARIDS               : 5 7
empty                : 4 15 21 24 36 42 45 52 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119

Parsing method: LALR

state 0

    (0) S' -> . PROGRAM
    (1) PROGRAM -> . SEM_CODE_STARTS DECLARATIONS FUNCTIONS program id SEM_PROGRAM_STARTS BLOCK SEM_FILL_ERAS SEM_PROGRAM_END
    (81) SEM_CODE_STARTS -> . empty
    (80) empty -> .

    var             reduce using rule 80 (empty -> .)
    list            reduce using rule 80 (empty -> .)
    function        reduce using rule 80 (empty -> .)
    program         reduce using rule 80 (empty -> .)

    empty                          shift and go to state 1
    PROGRAM                        shift and go to state 2
    SEM_CODE_STARTS                shift and go to state 3

state 1

    (81) SEM_CODE_STARTS -> empty .

    var             reduce using rule 81 (SEM_CODE_STARTS -> empty .)
    list            reduce using rule 81 (SEM_CODE_STARTS -> empty .)
    function        reduce using rule 81 (SEM_CODE_STARTS -> empty .)
    program         reduce using rule 81 (SEM_CODE_STARTS -> empty .)


state 2

    (0) S' -> PROGRAM .



state 3

    (1) PROGRAM -> SEM_CODE_STARTS . DECLARATIONS FUNCTIONS program id SEM_PROGRAM_STARTS BLOCK SEM_FILL_ERAS SEM_PROGRAM_END
    (2) DECLARATIONS -> . VARDEC DECLARATIONS
    (3) DECLARATIONS -> . LISTDEC DECLARATIONS
    (4) DECLARATIONS -> . empty
    (5) VARDEC -> . var TYPE VARIDS semicolon
    (8) LISTDEC -> . list TYPE LISTIDS semicolon
    (80) empty -> .

    var             shift and go to state 9
    list            shift and go to state 6
    function        reduce using rule 80 (empty -> .)
    program         reduce using rule 80 (empty -> .)

    VARDEC                         shift and go to state 4
    DECLARATIONS                   shift and go to state 5
    empty                          shift and go to state 7
    LISTDEC                        shift and go to state 8

state 4

    (2) DECLARATIONS -> VARDEC . DECLARATIONS
    (2) DECLARATIONS -> . VARDEC DECLARATIONS
    (3) DECLARATIONS -> . LISTDEC DECLARATIONS
    (4) DECLARATIONS -> . empty
    (5) VARDEC -> . var TYPE VARIDS semicolon
    (8) LISTDEC -> . list TYPE LISTIDS semicolon
    (80) empty -> .

    var             shift and go to state 9
    list            shift and go to state 6
    function        reduce using rule 80 (empty -> .)
    program         reduce using rule 80 (empty -> .)
    id              reduce using rule 80 (empty -> .)
    readto          reduce using rule 80 (empty -> .)
    print           reduce using rule 80 (empty -> .)
    if              reduce using rule 80 (empty -> .)
    while           reduce using rule 80 (empty -> .)
    return          reduce using rule 80 (empty -> .)
    rk              reduce using rule 80 (empty -> .)

    VARDEC                         shift and go to state 4
    DECLARATIONS                   shift and go to state 10
    LISTDEC                        shift and go to state 8
    empty                          shift and go to state 7

state 5

    (1) PROGRAM -> SEM_CODE_STARTS DECLARATIONS . FUNCTIONS program id SEM_PROGRAM_STARTS BLOCK SEM_FILL_ERAS SEM_PROGRAM_END
    (14) FUNCTIONS -> . FUNCTION FUNCTIONS
    (15) FUNCTIONS -> . empty
    (16) FUNCTION -> . function FUNCTYPE id SEM_ADD_FUNC lp FUNCPARAMETERS rp lk DECLARATIONS SEM_ADD_FUNC_START STATEMENTS rk SEM_END_FUNC
    (80) empty -> .

    function        shift and go to state 11
    program         reduce using rule 80 (empty -> .)

    FUNCTION                       shift and go to state 14
    FUNCTIONS                      shift and go to state 12
    empty                          shift and go to state 13

state 6

    (8) LISTDEC -> list . TYPE LISTIDS semicolon
    (11) TYPE -> . int SEM_STORE_TYPE
    (12) TYPE -> . decimal SEM_STORE_TYPE
    (13) TYPE -> . bool SEM_STORE_TYPE

    int             shift and go to state 15
    decimal         shift and go to state 16
    bool            shift and go to state 17

    TYPE                           shift and go to state 18

state 7

    (4) DECLARATIONS -> empty .

    function        reduce using rule 4 (DECLARATIONS -> empty .)
    program         reduce using rule 4 (DECLARATIONS -> empty .)
    id              reduce using rule 4 (DECLARATIONS -> empty .)
    readto          reduce using rule 4 (DECLARATIONS -> empty .)
    print           reduce using rule 4 (DECLARATIONS -> empty .)
    if              reduce using rule 4 (DECLARATIONS -> empty .)
    while           reduce using rule 4 (DECLARATIONS -> empty .)
    return          reduce using rule 4 (DECLARATIONS -> empty .)
    rk              reduce using rule 4 (DECLARATIONS -> empty .)


state 8

    (3) DECLARATIONS -> LISTDEC . DECLARATIONS
    (2) DECLARATIONS -> . VARDEC DECLARATIONS
    (3) DECLARATIONS -> . LISTDEC DECLARATIONS
    (4) DECLARATIONS -> . empty
    (5) VARDEC -> . var TYPE VARIDS semicolon
    (8) LISTDEC -> . list TYPE LISTIDS semicolon
    (80) empty -> .

    var             shift and go to state 9
    list            shift and go to state 6
    function        reduce using rule 80 (empty -> .)
    program         reduce using rule 80 (empty -> .)
    id              reduce using rule 80 (empty -> .)
    readto          reduce using rule 80 (empty -> .)
    print           reduce using rule 80 (empty -> .)
    if              reduce using rule 80 (empty -> .)
    while           reduce using rule 80 (empty -> .)
    return          reduce using rule 80 (empty -> .)
    rk              reduce using rule 80 (empty -> .)

    VARDEC                         shift and go to state 4
    DECLARATIONS                   shift and go to state 19
    LISTDEC                        shift and go to state 8
    empty                          shift and go to state 7

state 9

    (5) VARDEC -> var . TYPE VARIDS semicolon
    (11) TYPE -> . int SEM_STORE_TYPE
    (12) TYPE -> . decimal SEM_STORE_TYPE
    (13) TYPE -> . bool SEM_STORE_TYPE

    int             shift and go to state 15
    decimal         shift and go to state 16
    bool            shift and go to state 17

    TYPE                           shift and go to state 20

state 10

    (2) DECLARATIONS -> VARDEC DECLARATIONS .

    function        reduce using rule 2 (DECLARATIONS -> VARDEC DECLARATIONS .)
    program         reduce using rule 2 (DECLARATIONS -> VARDEC DECLARATIONS .)
    id              reduce using rule 2 (DECLARATIONS -> VARDEC DECLARATIONS .)
    readto          reduce using rule 2 (DECLARATIONS -> VARDEC DECLARATIONS .)
    print           reduce using rule 2 (DECLARATIONS -> VARDEC DECLARATIONS .)
    if              reduce using rule 2 (DECLARATIONS -> VARDEC DECLARATIONS .)
    while           reduce using rule 2 (DECLARATIONS -> VARDEC DECLARATIONS .)
    return          reduce using rule 2 (DECLARATIONS -> VARDEC DECLARATIONS .)
    rk              reduce using rule 2 (DECLARATIONS -> VARDEC DECLARATIONS .)


state 11

    (16) FUNCTION -> function . FUNCTYPE id SEM_ADD_FUNC lp FUNCPARAMETERS rp lk DECLARATIONS SEM_ADD_FUNC_START STATEMENTS rk SEM_END_FUNC
    (17) FUNCTYPE -> . void SEM_STORE_TYPE
    (18) FUNCTYPE -> . TYPE
    (11) TYPE -> . int SEM_STORE_TYPE
    (12) TYPE -> . decimal SEM_STORE_TYPE
    (13) TYPE -> . bool SEM_STORE_TYPE

    void            shift and go to state 23
    int             shift and go to state 15
    decimal         shift and go to state 16
    bool            shift and go to state 17

    TYPE                           shift and go to state 21
    FUNCTYPE                       shift and go to state 22

state 12

    (1) PROGRAM -> SEM_CODE_STARTS DECLARATIONS FUNCTIONS . program id SEM_PROGRAM_STARTS BLOCK SEM_FILL_ERAS SEM_PROGRAM_END

    program         shift and go to state 24


state 13

    (15) FUNCTIONS -> empty .

    program         reduce using rule 15 (FUNCTIONS -> empty .)


state 14

    (14) FUNCTIONS -> FUNCTION . FUNCTIONS
    (14) FUNCTIONS -> . FUNCTION FUNCTIONS
    (15) FUNCTIONS -> . empty
    (16) FUNCTION -> . function FUNCTYPE id SEM_ADD_FUNC lp FUNCPARAMETERS rp lk DECLARATIONS SEM_ADD_FUNC_START STATEMENTS rk SEM_END_FUNC
    (80) empty -> .

    function        shift and go to state 11
    program         reduce using rule 80 (empty -> .)

    FUNCTION                       shift and go to state 14
    FUNCTIONS                      shift and go to state 25
    empty                          shift and go to state 13

state 15

    (11) TYPE -> int . SEM_STORE_TYPE
    (83) SEM_STORE_TYPE -> . empty
    (80) empty -> .

    id              reduce using rule 80 (empty -> .)

    SEM_STORE_TYPE                 shift and go to state 26
    empty                          shift and go to state 27

state 16

    (12) TYPE -> decimal . SEM_STORE_TYPE
    (83) SEM_STORE_TYPE -> . empty
    (80) empty -> .

    id              reduce using rule 80 (empty -> .)

    SEM_STORE_TYPE                 shift and go to state 28
    empty                          shift and go to state 27

state 17

    (13) TYPE -> bool . SEM_STORE_TYPE
    (83) SEM_STORE_TYPE -> . empty
    (80) empty -> .

    id              reduce using rule 80 (empty -> .)

    SEM_STORE_TYPE                 shift and go to state 29
    empty                          shift and go to state 27

state 18

    (8) LISTDEC -> list TYPE . LISTIDS semicolon
    (9) LISTIDS -> . id SEM_ADD_LIST
    (10) LISTIDS -> . id SEM_ADD_LIST comma LISTIDS

    id              shift and go to state 31

    LISTIDS                        shift and go to state 30

state 19

    (3) DECLARATIONS -> LISTDEC DECLARATIONS .

    function        reduce using rule 3 (DECLARATIONS -> LISTDEC DECLARATIONS .)
    program         reduce using rule 3 (DECLARATIONS -> LISTDEC DECLARATIONS .)
    id              reduce using rule 3 (DECLARATIONS -> LISTDEC DECLARATIONS .)
    readto          reduce using rule 3 (DECLARATIONS -> LISTDEC DECLARATIONS .)
    print           reduce using rule 3 (DECLARATIONS -> LISTDEC DECLARATIONS .)
    if              reduce using rule 3 (DECLARATIONS -> LISTDEC DECLARATIONS .)
    while           reduce using rule 3 (DECLARATIONS -> LISTDEC DECLARATIONS .)
    return          reduce using rule 3 (DECLARATIONS -> LISTDEC DECLARATIONS .)
    rk              reduce using rule 3 (DECLARATIONS -> LISTDEC DECLARATIONS .)


state 20

    (5) VARDEC -> var TYPE . VARIDS semicolon
    (6) VARIDS -> . id SEM_ADD_VAR
    (7) VARIDS -> . id SEM_ADD_VAR comma VARIDS

    id              shift and go to state 33

    VARIDS                         shift and go to state 32

state 21

    (18) FUNCTYPE -> TYPE .

    id              reduce using rule 18 (FUNCTYPE -> TYPE .)


state 22

    (16) FUNCTION -> function FUNCTYPE . id SEM_ADD_FUNC lp FUNCPARAMETERS rp lk DECLARATIONS SEM_ADD_FUNC_START STATEMENTS rk SEM_END_FUNC

    id              shift and go to state 34


state 23

    (17) FUNCTYPE -> void . SEM_STORE_TYPE
    (83) SEM_STORE_TYPE -> . empty
    (80) empty -> .

    id              reduce using rule 80 (empty -> .)

    SEM_STORE_TYPE                 shift and go to state 35
    empty                          shift and go to state 27

state 24

    (1) PROGRAM -> SEM_CODE_STARTS DECLARATIONS FUNCTIONS program . id SEM_PROGRAM_STARTS BLOCK SEM_FILL_ERAS SEM_PROGRAM_END

    id              shift and go to state 36


state 25

    (14) FUNCTIONS -> FUNCTION FUNCTIONS .

    program         reduce using rule 14 (FUNCTIONS -> FUNCTION FUNCTIONS .)


state 26

    (11) TYPE -> int SEM_STORE_TYPE .

    id              reduce using rule 11 (TYPE -> int SEM_STORE_TYPE .)


state 27

    (83) SEM_STORE_TYPE -> empty .

    id              reduce using rule 83 (SEM_STORE_TYPE -> empty .)


state 28

    (12) TYPE -> decimal SEM_STORE_TYPE .

    id              reduce using rule 12 (TYPE -> decimal SEM_STORE_TYPE .)


state 29

    (13) TYPE -> bool SEM_STORE_TYPE .

    id              reduce using rule 13 (TYPE -> bool SEM_STORE_TYPE .)


state 30

    (8) LISTDEC -> list TYPE LISTIDS . semicolon

    semicolon       shift and go to state 37


state 31

    (9) LISTIDS -> id . SEM_ADD_LIST
    (10) LISTIDS -> id . SEM_ADD_LIST comma LISTIDS
    (116) SEM_ADD_LIST -> . empty
    (80) empty -> .

    comma           reduce using rule 80 (empty -> .)
    semicolon       reduce using rule 80 (empty -> .)

    SEM_ADD_LIST                   shift and go to state 38
    empty                          shift and go to state 39

state 32

    (5) VARDEC -> var TYPE VARIDS . semicolon

    semicolon       shift and go to state 40


state 33

    (6) VARIDS -> id . SEM_ADD_VAR
    (7) VARIDS -> id . SEM_ADD_VAR comma VARIDS
    (87) SEM_ADD_VAR -> . empty
    (80) empty -> .

    comma           reduce using rule 80 (empty -> .)
    semicolon       reduce using rule 80 (empty -> .)

    SEM_ADD_VAR                    shift and go to state 41
    empty                          shift and go to state 42

state 34

    (16) FUNCTION -> function FUNCTYPE id . SEM_ADD_FUNC lp FUNCPARAMETERS rp lk DECLARATIONS SEM_ADD_FUNC_START STATEMENTS rk SEM_END_FUNC
    (84) SEM_ADD_FUNC -> . empty
    (80) empty -> .

    lp              reduce using rule 80 (empty -> .)

    SEM_ADD_FUNC                   shift and go to state 43
    empty                          shift and go to state 44

state 35

    (17) FUNCTYPE -> void SEM_STORE_TYPE .

    id              reduce using rule 17 (FUNCTYPE -> void SEM_STORE_TYPE .)


state 36

    (1) PROGRAM -> SEM_CODE_STARTS DECLARATIONS FUNCTIONS program id . SEM_PROGRAM_STARTS BLOCK SEM_FILL_ERAS SEM_PROGRAM_END
    (82) SEM_PROGRAM_STARTS -> . empty
    (80) empty -> .

    lk              reduce using rule 80 (empty -> .)

    empty                          shift and go to state 45
    SEM_PROGRAM_STARTS             shift and go to state 46

state 37

    (8) LISTDEC -> list TYPE LISTIDS semicolon .

    var             reduce using rule 8 (LISTDEC -> list TYPE LISTIDS semicolon .)
    list            reduce using rule 8 (LISTDEC -> list TYPE LISTIDS semicolon .)
    function        reduce using rule 8 (LISTDEC -> list TYPE LISTIDS semicolon .)
    program         reduce using rule 8 (LISTDEC -> list TYPE LISTIDS semicolon .)
    id              reduce using rule 8 (LISTDEC -> list TYPE LISTIDS semicolon .)
    readto          reduce using rule 8 (LISTDEC -> list TYPE LISTIDS semicolon .)
    print           reduce using rule 8 (LISTDEC -> list TYPE LISTIDS semicolon .)
    if              reduce using rule 8 (LISTDEC -> list TYPE LISTIDS semicolon .)
    while           reduce using rule 8 (LISTDEC -> list TYPE LISTIDS semicolon .)
    return          reduce using rule 8 (LISTDEC -> list TYPE LISTIDS semicolon .)
    rk              reduce using rule 8 (LISTDEC -> list TYPE LISTIDS semicolon .)


state 38

    (9) LISTIDS -> id SEM_ADD_LIST .
    (10) LISTIDS -> id SEM_ADD_LIST . comma LISTIDS

    semicolon       reduce using rule 9 (LISTIDS -> id SEM_ADD_LIST .)
    comma           shift and go to state 47


state 39

    (116) SEM_ADD_LIST -> empty .

    comma           reduce using rule 116 (SEM_ADD_LIST -> empty .)
    semicolon       reduce using rule 116 (SEM_ADD_LIST -> empty .)


state 40

    (5) VARDEC -> var TYPE VARIDS semicolon .

    var             reduce using rule 5 (VARDEC -> var TYPE VARIDS semicolon .)
    list            reduce using rule 5 (VARDEC -> var TYPE VARIDS semicolon .)
    function        reduce using rule 5 (VARDEC -> var TYPE VARIDS semicolon .)
    program         reduce using rule 5 (VARDEC -> var TYPE VARIDS semicolon .)
    id              reduce using rule 5 (VARDEC -> var TYPE VARIDS semicolon .)
    readto          reduce using rule 5 (VARDEC -> var TYPE VARIDS semicolon .)
    print           reduce using rule 5 (VARDEC -> var TYPE VARIDS semicolon .)
    if              reduce using rule 5 (VARDEC -> var TYPE VARIDS semicolon .)
    while           reduce using rule 5 (VARDEC -> var TYPE VARIDS semicolon .)
    return          reduce using rule 5 (VARDEC -> var TYPE VARIDS semicolon .)
    rk              reduce using rule 5 (VARDEC -> var TYPE VARIDS semicolon .)


state 41

    (6) VARIDS -> id SEM_ADD_VAR .
    (7) VARIDS -> id SEM_ADD_VAR . comma VARIDS

    semicolon       reduce using rule 6 (VARIDS -> id SEM_ADD_VAR .)
    comma           shift and go to state 48


state 42

    (87) SEM_ADD_VAR -> empty .

    comma           reduce using rule 87 (SEM_ADD_VAR -> empty .)
    semicolon       reduce using rule 87 (SEM_ADD_VAR -> empty .)


state 43

    (16) FUNCTION -> function FUNCTYPE id SEM_ADD_FUNC . lp FUNCPARAMETERS rp lk DECLARATIONS SEM_ADD_FUNC_START STATEMENTS rk SEM_END_FUNC

    lp              shift and go to state 49


state 44

    (84) SEM_ADD_FUNC -> empty .

    lp              reduce using rule 84 (SEM_ADD_FUNC -> empty .)


state 45

    (82) SEM_PROGRAM_STARTS -> empty .

    lk              reduce using rule 82 (SEM_PROGRAM_STARTS -> empty .)


state 46

    (1) PROGRAM -> SEM_CODE_STARTS DECLARATIONS FUNCTIONS program id SEM_PROGRAM_STARTS . BLOCK SEM_FILL_ERAS SEM_PROGRAM_END
    (22) BLOCK -> . lk STATEMENTS rk

    lk              shift and go to state 50

    BLOCK                          shift and go to state 51

state 47

    (10) LISTIDS -> id SEM_ADD_LIST comma . LISTIDS
    (9) LISTIDS -> . id SEM_ADD_LIST
    (10) LISTIDS -> . id SEM_ADD_LIST comma LISTIDS

    id              shift and go to state 31

    LISTIDS                        shift and go to state 52

state 48

    (7) VARIDS -> id SEM_ADD_VAR comma . VARIDS
    (6) VARIDS -> . id SEM_ADD_VAR
    (7) VARIDS -> . id SEM_ADD_VAR comma VARIDS

    id              shift and go to state 33

    VARIDS                         shift and go to state 53

state 49

    (16) FUNCTION -> function FUNCTYPE id SEM_ADD_FUNC lp . FUNCPARAMETERS rp lk DECLARATIONS SEM_ADD_FUNC_START STATEMENTS rk SEM_END_FUNC
    (19) FUNCPARAMETERS -> . TYPE id SEM_ADD_PARAM
    (20) FUNCPARAMETERS -> . TYPE id SEM_ADD_PARAM comma FUNCPARAMETERS
    (21) FUNCPARAMETERS -> . empty
    (11) TYPE -> . int SEM_STORE_TYPE
    (12) TYPE -> . decimal SEM_STORE_TYPE
    (13) TYPE -> . bool SEM_STORE_TYPE
    (80) empty -> .

    int             shift and go to state 15
    decimal         shift and go to state 16
    bool            shift and go to state 17
    rp              reduce using rule 80 (empty -> .)

    TYPE                           shift and go to state 54
    empty                          shift and go to state 55
    FUNCPARAMETERS                 shift and go to state 56

state 50

    (22) BLOCK -> lk . STATEMENTS rk
    (23) STATEMENTS -> . STATEMENT STATEMENTS
    (24) STATEMENTS -> . empty
    (25) STATEMENT -> . ASSIGN
    (26) STATEMENT -> . READ
    (27) STATEMENT -> . PRINT
    (28) STATEMENT -> . FUNCCALL
    (29) STATEMENT -> . CONDITION
    (30) STATEMENT -> . LOOP
    (31) STATEMENT -> . RETURN
    (32) STATEMENT -> . LISTADD
    (33) STATEMENT -> . LISTREMOVE
    (80) empty -> .
    (34) ASSIGN -> . id SEM_PUSH_OPERAND LISTINDEX equal SEM_PUSH_OPERATOR EXPRESSION SEM_ASSIGN semicolon
    (37) READ -> . readto SEM_PUSH_OPERATOR lp id SEM_PUSH_OPERAND SEM_GEN_READ rp semicolon
    (38) PRINT -> . print SEM_PUSH_OPERATOR lp EXPRESSION rp SEM_PRINT semicolon
    (39) FUNCCALL -> . id SEM_VERIFY_FUNC lp SEM_GEN_ERA CALLPARAMETERS rp SEM_VERIFY_NUM_PARAMS semicolon SEM_GEN_GOSUB
    (43) CONDITION -> . if lp EXPRESSION rp SEM_GEN_GOTOF BLOCK ELSEBLOCK SEM_FILL_END
    (46) LOOP -> . while SEM_PUSH_START lp EXPRESSION rp SEM_GEN_GOTOF BLOCK SEM_FILL_LOOP
    (47) RETURN -> . return EXPRESSION SEM_RETURN semicolon
    (78) LISTADD -> . id SEM_PUSH_OPERAND dot add lp EXP rp SEM_ADD_TO_LIST semicolon
    (79) LISTREMOVE -> . id SEM_PUSH_OPERAND LISTINDEX dot remove semicolon SEM_REMOVE_FROM_LIST

    rk              reduce using rule 80 (empty -> .)
    id              shift and go to state 63
    readto          shift and go to state 60
    print           shift and go to state 66
    if              shift and go to state 64
    while           shift and go to state 59
    return          shift and go to state 69

    STATEMENTS                     shift and go to state 57
    FUNCCALL                       shift and go to state 65
    READ                           shift and go to state 58
    PRINT                          shift and go to state 61
    RETURN                         shift and go to state 62
    ASSIGN                         shift and go to state 67
    CONDITION                      shift and go to state 68
    LISTADD                        shift and go to state 70
    STATEMENT                      shift and go to state 71
    empty                          shift and go to state 72
    LISTREMOVE                     shift and go to state 73
    LOOP                           shift and go to state 74

state 51

    (1) PROGRAM -> SEM_CODE_STARTS DECLARATIONS FUNCTIONS program id SEM_PROGRAM_STARTS BLOCK . SEM_FILL_ERAS SEM_PROGRAM_END
    (115) SEM_FILL_ERAS -> . empty
    (80) empty -> .

    $end            reduce using rule 80 (empty -> .)

    SEM_FILL_ERAS                  shift and go to state 75
    empty                          shift and go to state 76

state 52

    (10) LISTIDS -> id SEM_ADD_LIST comma LISTIDS .

    semicolon       reduce using rule 10 (LISTIDS -> id SEM_ADD_LIST comma LISTIDS .)


state 53

    (7) VARIDS -> id SEM_ADD_VAR comma VARIDS .

    semicolon       reduce using rule 7 (VARIDS -> id SEM_ADD_VAR comma VARIDS .)


state 54

    (19) FUNCPARAMETERS -> TYPE . id SEM_ADD_PARAM
    (20) FUNCPARAMETERS -> TYPE . id SEM_ADD_PARAM comma FUNCPARAMETERS

    id              shift and go to state 77


state 55

    (21) FUNCPARAMETERS -> empty .

    rp              reduce using rule 21 (FUNCPARAMETERS -> empty .)


state 56

    (16) FUNCTION -> function FUNCTYPE id SEM_ADD_FUNC lp FUNCPARAMETERS . rp lk DECLARATIONS SEM_ADD_FUNC_START STATEMENTS rk SEM_END_FUNC

    rp              shift and go to state 78


state 57

    (22) BLOCK -> lk STATEMENTS . rk

    rk              shift and go to state 79


state 58

    (26) STATEMENT -> READ .

    id              reduce using rule 26 (STATEMENT -> READ .)
    readto          reduce using rule 26 (STATEMENT -> READ .)
    print           reduce using rule 26 (STATEMENT -> READ .)
    if              reduce using rule 26 (STATEMENT -> READ .)
    while           reduce using rule 26 (STATEMENT -> READ .)
    return          reduce using rule 26 (STATEMENT -> READ .)
    rk              reduce using rule 26 (STATEMENT -> READ .)


state 59

    (46) LOOP -> while . SEM_PUSH_START lp EXPRESSION rp SEM_GEN_GOTOF BLOCK SEM_FILL_LOOP
    (103) SEM_PUSH_START -> . empty
    (80) empty -> .

    lp              reduce using rule 80 (empty -> .)

    SEM_PUSH_START                 shift and go to state 81
    empty                          shift and go to state 80

state 60

    (37) READ -> readto . SEM_PUSH_OPERATOR lp id SEM_PUSH_OPERAND SEM_GEN_READ rp semicolon
    (89) SEM_PUSH_OPERATOR -> . empty
    (80) empty -> .

    lp              reduce using rule 80 (empty -> .)

    empty                          shift and go to state 82
    SEM_PUSH_OPERATOR              shift and go to state 83

state 61

    (27) STATEMENT -> PRINT .

    id              reduce using rule 27 (STATEMENT -> PRINT .)
    readto          reduce using rule 27 (STATEMENT -> PRINT .)
    print           reduce using rule 27 (STATEMENT -> PRINT .)
    if              reduce using rule 27 (STATEMENT -> PRINT .)
    while           reduce using rule 27 (STATEMENT -> PRINT .)
    return          reduce using rule 27 (STATEMENT -> PRINT .)
    rk              reduce using rule 27 (STATEMENT -> PRINT .)


state 62

    (31) STATEMENT -> RETURN .

    id              reduce using rule 31 (STATEMENT -> RETURN .)
    readto          reduce using rule 31 (STATEMENT -> RETURN .)
    print           reduce using rule 31 (STATEMENT -> RETURN .)
    if              reduce using rule 31 (STATEMENT -> RETURN .)
    while           reduce using rule 31 (STATEMENT -> RETURN .)
    return          reduce using rule 31 (STATEMENT -> RETURN .)
    rk              reduce using rule 31 (STATEMENT -> RETURN .)


state 63

    (34) ASSIGN -> id . SEM_PUSH_OPERAND LISTINDEX equal SEM_PUSH_OPERATOR EXPRESSION SEM_ASSIGN semicolon
    (39) FUNCCALL -> id . SEM_VERIFY_FUNC lp SEM_GEN_ERA CALLPARAMETERS rp SEM_VERIFY_NUM_PARAMS semicolon SEM_GEN_GOSUB
    (78) LISTADD -> id . SEM_PUSH_OPERAND dot add lp EXP rp SEM_ADD_TO_LIST semicolon
    (79) LISTREMOVE -> id . SEM_PUSH_OPERAND LISTINDEX dot remove semicolon SEM_REMOVE_FROM_LIST
    (88) SEM_PUSH_OPERAND -> . empty
    (107) SEM_VERIFY_FUNC -> . empty
    (80) empty -> .

    dot             reduce using rule 80 (empty -> .)
    lb              reduce using rule 80 (empty -> .)
    equal           reduce using rule 80 (empty -> .)
    lp              reduce using rule 80 (empty -> .)

    SEM_PUSH_OPERAND               shift and go to state 86
    SEM_VERIFY_FUNC                shift and go to state 84
    empty                          shift and go to state 85

state 64

    (43) CONDITION -> if . lp EXPRESSION rp SEM_GEN_GOTOF BLOCK ELSEBLOCK SEM_FILL_END

    lp              shift and go to state 87


state 65

    (28) STATEMENT -> FUNCCALL .

    id              reduce using rule 28 (STATEMENT -> FUNCCALL .)
    readto          reduce using rule 28 (STATEMENT -> FUNCCALL .)
    print           reduce using rule 28 (STATEMENT -> FUNCCALL .)
    if              reduce using rule 28 (STATEMENT -> FUNCCALL .)
    while           reduce using rule 28 (STATEMENT -> FUNCCALL .)
    return          reduce using rule 28 (STATEMENT -> FUNCCALL .)
    rk              reduce using rule 28 (STATEMENT -> FUNCCALL .)


state 66

    (38) PRINT -> print . SEM_PUSH_OPERATOR lp EXPRESSION rp SEM_PRINT semicolon
    (89) SEM_PUSH_OPERATOR -> . empty
    (80) empty -> .

    lp              reduce using rule 80 (empty -> .)

    empty                          shift and go to state 82
    SEM_PUSH_OPERATOR              shift and go to state 88

state 67

    (25) STATEMENT -> ASSIGN .

    id              reduce using rule 25 (STATEMENT -> ASSIGN .)
    readto          reduce using rule 25 (STATEMENT -> ASSIGN .)
    print           reduce using rule 25 (STATEMENT -> ASSIGN .)
    if              reduce using rule 25 (STATEMENT -> ASSIGN .)
    while           reduce using rule 25 (STATEMENT -> ASSIGN .)
    return          reduce using rule 25 (STATEMENT -> ASSIGN .)
    rk              reduce using rule 25 (STATEMENT -> ASSIGN .)


state 68

    (29) STATEMENT -> CONDITION .

    id              reduce using rule 29 (STATEMENT -> CONDITION .)
    readto          reduce using rule 29 (STATEMENT -> CONDITION .)
    print           reduce using rule 29 (STATEMENT -> CONDITION .)
    if              reduce using rule 29 (STATEMENT -> CONDITION .)
    while           reduce using rule 29 (STATEMENT -> CONDITION .)
    return          reduce using rule 29 (STATEMENT -> CONDITION .)
    rk              reduce using rule 29 (STATEMENT -> CONDITION .)


state 69

    (47) RETURN -> return . EXPRESSION SEM_RETURN semicolon
    (48) EXPRESSION -> . NOT SUPEREXP SEM_RESOLVE_NOT
    (49) EXPRESSION -> . NOT SUPEREXP SEM_RESOLVE_NOT and SEM_PUSH_OPERATOR NOT SUPEREXP SEM_RESOLVE_NOT SEM_RESOLVE_ANDOR
    (50) EXPRESSION -> . NOT SUPEREXP SEM_RESOLVE_NOT or SEM_PUSH_OPERATOR NOT SUPEREXP SEM_RESOLVE_NOT SEM_RESOLVE_ANDOR
    (51) NOT -> . not SEM_PUSH_OPERATOR
    (52) NOT -> . empty
    (80) empty -> .

    not             shift and go to state 89
    lp              reduce using rule 80 (empty -> .)
    plus            reduce using rule 80 (empty -> .)
    minus           reduce using rule 80 (empty -> .)
    id              reduce using rule 80 (empty -> .)
    c_int           reduce using rule 80 (empty -> .)
    c_decimal       reduce using rule 80 (empty -> .)
    c_string        reduce using rule 80 (empty -> .)
    false           reduce using rule 80 (empty -> .)
    true            reduce using rule 80 (empty -> .)

    EXPRESSION                     shift and go to state 92
    empty                          shift and go to state 90
    NOT                            shift and go to state 91

state 70

    (32) STATEMENT -> LISTADD .

    id              reduce using rule 32 (STATEMENT -> LISTADD .)
    readto          reduce using rule 32 (STATEMENT -> LISTADD .)
    print           reduce using rule 32 (STATEMENT -> LISTADD .)
    if              reduce using rule 32 (STATEMENT -> LISTADD .)
    while           reduce using rule 32 (STATEMENT -> LISTADD .)
    return          reduce using rule 32 (STATEMENT -> LISTADD .)
    rk              reduce using rule 32 (STATEMENT -> LISTADD .)


state 71

    (23) STATEMENTS -> STATEMENT . STATEMENTS
    (23) STATEMENTS -> . STATEMENT STATEMENTS
    (24) STATEMENTS -> . empty
    (25) STATEMENT -> . ASSIGN
    (26) STATEMENT -> . READ
    (27) STATEMENT -> . PRINT
    (28) STATEMENT -> . FUNCCALL
    (29) STATEMENT -> . CONDITION
    (30) STATEMENT -> . LOOP
    (31) STATEMENT -> . RETURN
    (32) STATEMENT -> . LISTADD
    (33) STATEMENT -> . LISTREMOVE
    (80) empty -> .
    (34) ASSIGN -> . id SEM_PUSH_OPERAND LISTINDEX equal SEM_PUSH_OPERATOR EXPRESSION SEM_ASSIGN semicolon
    (37) READ -> . readto SEM_PUSH_OPERATOR lp id SEM_PUSH_OPERAND SEM_GEN_READ rp semicolon
    (38) PRINT -> . print SEM_PUSH_OPERATOR lp EXPRESSION rp SEM_PRINT semicolon
    (39) FUNCCALL -> . id SEM_VERIFY_FUNC lp SEM_GEN_ERA CALLPARAMETERS rp SEM_VERIFY_NUM_PARAMS semicolon SEM_GEN_GOSUB
    (43) CONDITION -> . if lp EXPRESSION rp SEM_GEN_GOTOF BLOCK ELSEBLOCK SEM_FILL_END
    (46) LOOP -> . while SEM_PUSH_START lp EXPRESSION rp SEM_GEN_GOTOF BLOCK SEM_FILL_LOOP
    (47) RETURN -> . return EXPRESSION SEM_RETURN semicolon
    (78) LISTADD -> . id SEM_PUSH_OPERAND dot add lp EXP rp SEM_ADD_TO_LIST semicolon
    (79) LISTREMOVE -> . id SEM_PUSH_OPERAND LISTINDEX dot remove semicolon SEM_REMOVE_FROM_LIST

    rk              reduce using rule 80 (empty -> .)
    id              shift and go to state 63
    readto          shift and go to state 60
    print           shift and go to state 66
    if              shift and go to state 64
    while           shift and go to state 59
    return          shift and go to state 69

    STATEMENTS                     shift and go to state 93
    FUNCCALL                       shift and go to state 65
    READ                           shift and go to state 58
    PRINT                          shift and go to state 61
    RETURN                         shift and go to state 62
    ASSIGN                         shift and go to state 67
    CONDITION                      shift and go to state 68
    LISTADD                        shift and go to state 70
    STATEMENT                      shift and go to state 71
    empty                          shift and go to state 72
    LISTREMOVE                     shift and go to state 73
    LOOP                           shift and go to state 74

state 72

    (24) STATEMENTS -> empty .

    rk              reduce using rule 24 (STATEMENTS -> empty .)


state 73

    (33) STATEMENT -> LISTREMOVE .

    id              reduce using rule 33 (STATEMENT -> LISTREMOVE .)
    readto          reduce using rule 33 (STATEMENT -> LISTREMOVE .)
    print           reduce using rule 33 (STATEMENT -> LISTREMOVE .)
    if              reduce using rule 33 (STATEMENT -> LISTREMOVE .)
    while           reduce using rule 33 (STATEMENT -> LISTREMOVE .)
    return          reduce using rule 33 (STATEMENT -> LISTREMOVE .)
    rk              reduce using rule 33 (STATEMENT -> LISTREMOVE .)


state 74

    (30) STATEMENT -> LOOP .

    id              reduce using rule 30 (STATEMENT -> LOOP .)
    readto          reduce using rule 30 (STATEMENT -> LOOP .)
    print           reduce using rule 30 (STATEMENT -> LOOP .)
    if              reduce using rule 30 (STATEMENT -> LOOP .)
    while           reduce using rule 30 (STATEMENT -> LOOP .)
    return          reduce using rule 30 (STATEMENT -> LOOP .)
    rk              reduce using rule 30 (STATEMENT -> LOOP .)


state 75

    (1) PROGRAM -> SEM_CODE_STARTS DECLARATIONS FUNCTIONS program id SEM_PROGRAM_STARTS BLOCK SEM_FILL_ERAS . SEM_PROGRAM_END
    (114) SEM_PROGRAM_END -> . empty
    (80) empty -> .

    $end            reduce using rule 80 (empty -> .)

    SEM_PROGRAM_END                shift and go to state 95
    empty                          shift and go to state 94

state 76

    (115) SEM_FILL_ERAS -> empty .

    $end            reduce using rule 115 (SEM_FILL_ERAS -> empty .)


state 77

    (19) FUNCPARAMETERS -> TYPE id . SEM_ADD_PARAM
    (20) FUNCPARAMETERS -> TYPE id . SEM_ADD_PARAM comma FUNCPARAMETERS
    (105) SEM_ADD_PARAM -> . empty
    (80) empty -> .

    comma           reduce using rule 80 (empty -> .)
    rp              reduce using rule 80 (empty -> .)

    empty                          shift and go to state 97
    SEM_ADD_PARAM                  shift and go to state 96

state 78

    (16) FUNCTION -> function FUNCTYPE id SEM_ADD_FUNC lp FUNCPARAMETERS rp . lk DECLARATIONS SEM_ADD_FUNC_START STATEMENTS rk SEM_END_FUNC

    lk              shift and go to state 98


state 79

    (22) BLOCK -> lk STATEMENTS rk .

    $end            reduce using rule 22 (BLOCK -> lk STATEMENTS rk .)
    else            reduce using rule 22 (BLOCK -> lk STATEMENTS rk .)
    id              reduce using rule 22 (BLOCK -> lk STATEMENTS rk .)
    readto          reduce using rule 22 (BLOCK -> lk STATEMENTS rk .)
    print           reduce using rule 22 (BLOCK -> lk STATEMENTS rk .)
    if              reduce using rule 22 (BLOCK -> lk STATEMENTS rk .)
    while           reduce using rule 22 (BLOCK -> lk STATEMENTS rk .)
    return          reduce using rule 22 (BLOCK -> lk STATEMENTS rk .)
    rk              reduce using rule 22 (BLOCK -> lk STATEMENTS rk .)


state 80

    (103) SEM_PUSH_START -> empty .

    lp              reduce using rule 103 (SEM_PUSH_START -> empty .)


state 81

    (46) LOOP -> while SEM_PUSH_START . lp EXPRESSION rp SEM_GEN_GOTOF BLOCK SEM_FILL_LOOP

    lp              shift and go to state 99


state 82

    (89) SEM_PUSH_OPERATOR -> empty .

    lp              reduce using rule 89 (SEM_PUSH_OPERATOR -> empty .)
    plus            reduce using rule 89 (SEM_PUSH_OPERATOR -> empty .)
    minus           reduce using rule 89 (SEM_PUSH_OPERATOR -> empty .)
    id              reduce using rule 89 (SEM_PUSH_OPERATOR -> empty .)
    c_int           reduce using rule 89 (SEM_PUSH_OPERATOR -> empty .)
    c_decimal       reduce using rule 89 (SEM_PUSH_OPERATOR -> empty .)
    c_string        reduce using rule 89 (SEM_PUSH_OPERATOR -> empty .)
    false           reduce using rule 89 (SEM_PUSH_OPERATOR -> empty .)
    true            reduce using rule 89 (SEM_PUSH_OPERATOR -> empty .)
    not             reduce using rule 89 (SEM_PUSH_OPERATOR -> empty .)


state 83

    (37) READ -> readto SEM_PUSH_OPERATOR . lp id SEM_PUSH_OPERAND SEM_GEN_READ rp semicolon

    lp              shift and go to state 100


state 84

    (39) FUNCCALL -> id SEM_VERIFY_FUNC . lp SEM_GEN_ERA CALLPARAMETERS rp SEM_VERIFY_NUM_PARAMS semicolon SEM_GEN_GOSUB

    lp              shift and go to state 101


state 85

    (88) SEM_PUSH_OPERAND -> empty .
    (107) SEM_VERIFY_FUNC -> empty .

    lb              reduce using rule 88 (SEM_PUSH_OPERAND -> empty .)
    times           reduce using rule 88 (SEM_PUSH_OPERAND -> empty .)
    divide          reduce using rule 88 (SEM_PUSH_OPERAND -> empty .)
    plus            reduce using rule 88 (SEM_PUSH_OPERAND -> empty .)
    minus           reduce using rule 88 (SEM_PUSH_OPERAND -> empty .)
    gt              reduce using rule 88 (SEM_PUSH_OPERAND -> empty .)
    ge              reduce using rule 88 (SEM_PUSH_OPERAND -> empty .)
    lt              reduce using rule 88 (SEM_PUSH_OPERAND -> empty .)
    le              reduce using rule 88 (SEM_PUSH_OPERAND -> empty .)
    ee              reduce using rule 88 (SEM_PUSH_OPERAND -> empty .)
    ne              reduce using rule 88 (SEM_PUSH_OPERAND -> empty .)
    and             reduce using rule 88 (SEM_PUSH_OPERAND -> empty .)
    or              reduce using rule 88 (SEM_PUSH_OPERAND -> empty .)
    semicolon       reduce using rule 88 (SEM_PUSH_OPERAND -> empty .)
    rp              reduce using rule 88 (SEM_PUSH_OPERAND -> empty .)
    comma           reduce using rule 88 (SEM_PUSH_OPERAND -> empty .)
    rb              reduce using rule 88 (SEM_PUSH_OPERAND -> empty .)
    dot             reduce using rule 88 (SEM_PUSH_OPERAND -> empty .)
    equal           reduce using rule 88 (SEM_PUSH_OPERAND -> empty .)
    lp              reduce using rule 107 (SEM_VERIFY_FUNC -> empty .)


state 86

    (34) ASSIGN -> id SEM_PUSH_OPERAND . LISTINDEX equal SEM_PUSH_OPERATOR EXPRESSION SEM_ASSIGN semicolon
    (78) LISTADD -> id SEM_PUSH_OPERAND . dot add lp EXP rp SEM_ADD_TO_LIST semicolon
    (79) LISTREMOVE -> id SEM_PUSH_OPERAND . LISTINDEX dot remove semicolon SEM_REMOVE_FROM_LIST
    (35) LISTINDEX -> . lb EXP rb SEM_LIST_INDEX
    (36) LISTINDEX -> . empty
    (80) empty -> .

  ! shift/reduce conflict for dot resolved as shift
    dot             shift and go to state 104
    lb              shift and go to state 102
    equal           reduce using rule 80 (empty -> .)

  ! dot             [ reduce using rule 80 (empty -> .) ]

    empty                          shift and go to state 105
    LISTINDEX                      shift and go to state 103

state 87

    (43) CONDITION -> if lp . EXPRESSION rp SEM_GEN_GOTOF BLOCK ELSEBLOCK SEM_FILL_END
    (48) EXPRESSION -> . NOT SUPEREXP SEM_RESOLVE_NOT
    (49) EXPRESSION -> . NOT SUPEREXP SEM_RESOLVE_NOT and SEM_PUSH_OPERATOR NOT SUPEREXP SEM_RESOLVE_NOT SEM_RESOLVE_ANDOR
    (50) EXPRESSION -> . NOT SUPEREXP SEM_RESOLVE_NOT or SEM_PUSH_OPERATOR NOT SUPEREXP SEM_RESOLVE_NOT SEM_RESOLVE_ANDOR
    (51) NOT -> . not SEM_PUSH_OPERATOR
    (52) NOT -> . empty
    (80) empty -> .

    not             shift and go to state 89
    lp              reduce using rule 80 (empty -> .)
    plus            reduce using rule 80 (empty -> .)
    minus           reduce using rule 80 (empty -> .)
    id              reduce using rule 80 (empty -> .)
    c_int           reduce using rule 80 (empty -> .)
    c_decimal       reduce using rule 80 (empty -> .)
    c_string        reduce using rule 80 (empty -> .)
    false           reduce using rule 80 (empty -> .)
    true            reduce using rule 80 (empty -> .)

    empty                          shift and go to state 90
    NOT                            shift and go to state 91
    EXPRESSION                     shift and go to state 106

state 88

    (38) PRINT -> print SEM_PUSH_OPERATOR . lp EXPRESSION rp SEM_PRINT semicolon

    lp              shift and go to state 107


state 89

    (51) NOT -> not . SEM_PUSH_OPERATOR
    (89) SEM_PUSH_OPERATOR -> . empty
    (80) empty -> .

    lp              reduce using rule 80 (empty -> .)
    plus            reduce using rule 80 (empty -> .)
    minus           reduce using rule 80 (empty -> .)
    id              reduce using rule 80 (empty -> .)
    c_int           reduce using rule 80 (empty -> .)
    c_decimal       reduce using rule 80 (empty -> .)
    c_string        reduce using rule 80 (empty -> .)
    false           reduce using rule 80 (empty -> .)
    true            reduce using rule 80 (empty -> .)

    empty                          shift and go to state 82
    SEM_PUSH_OPERATOR              shift and go to state 108

state 90

    (52) NOT -> empty .

    lp              reduce using rule 52 (NOT -> empty .)
    plus            reduce using rule 52 (NOT -> empty .)
    minus           reduce using rule 52 (NOT -> empty .)
    id              reduce using rule 52 (NOT -> empty .)
    c_int           reduce using rule 52 (NOT -> empty .)
    c_decimal       reduce using rule 52 (NOT -> empty .)
    c_string        reduce using rule 52 (NOT -> empty .)
    false           reduce using rule 52 (NOT -> empty .)
    true            reduce using rule 52 (NOT -> empty .)


state 91

    (48) EXPRESSION -> NOT . SUPEREXP SEM_RESOLVE_NOT
    (49) EXPRESSION -> NOT . SUPEREXP SEM_RESOLVE_NOT and SEM_PUSH_OPERATOR NOT SUPEREXP SEM_RESOLVE_NOT SEM_RESOLVE_ANDOR
    (50) EXPRESSION -> NOT . SUPEREXP SEM_RESOLVE_NOT or SEM_PUSH_OPERATOR NOT SUPEREXP SEM_RESOLVE_NOT SEM_RESOLVE_ANDOR
    (53) SUPEREXP -> . EXP
    (54) SUPEREXP -> . EXP RELOP EXP SEM_RESOLVE_RELOP
    (61) EXP -> . TERM SEM_RESOLVE_PLUSMINUS
    (62) EXP -> . TERM SEM_RESOLVE_PLUSMINUS plus SEM_PUSH_OPERATOR EXP
    (63) EXP -> . TERM SEM_RESOLVE_PLUSMINUS minus SEM_PUSH_OPERATOR EXP
    (64) TERM -> . FACTOR SEM_RESOLVE_TIMESDIVIDE
    (65) TERM -> . FACTOR SEM_RESOLVE_TIMESDIVIDE times SEM_PUSH_OPERATOR TERM
    (66) TERM -> . FACTOR SEM_RESOLVE_TIMESDIVIDE divide SEM_PUSH_OPERATOR TERM
    (67) FACTOR -> . lp SEM_PUSH_PAREN EXPRESSION rp SEM_POP_PAREN
    (68) FACTOR -> . CONSTANT
    (69) FACTOR -> . plus CONSTANT
    (70) FACTOR -> . minus CONSTANT
    (71) CONSTANT -> . id SEM_PUSH_OPERAND LISTINDEX
    (72) CONSTANT -> . id SEM_VERIFY_FUNC lp SEM_PUSH_PAREN SEM_GEN_ERA CALLPARAMETERS rp SEM_POP_PAREN SEM_VERIFY_NUM_PARAMS SEM_GEN_GOSUB_ASSIGN
    (73) CONSTANT -> . c_int SEM_PUSH_CONSTANT
    (74) CONSTANT -> . c_decimal SEM_PUSH_CONSTANT
    (75) CONSTANT -> . c_string SEM_PUSH_CONSTANT
    (76) CONSTANT -> . false SEM_PUSH_CONSTANT
    (77) CONSTANT -> . true SEM_PUSH_CONSTANT

    lp              shift and go to state 115
    plus            shift and go to state 120
    minus           shift and go to state 122
    id              shift and go to state 112
    c_int           shift and go to state 117
    c_decimal       shift and go to state 118
    c_string        shift and go to state 116
    false           shift and go to state 111
    true            shift and go to state 114

    CONSTANT                       shift and go to state 109
    EXP                            shift and go to state 110
    TERM                           shift and go to state 113
    SUPEREXP                       shift and go to state 119
    FACTOR                         shift and go to state 121

state 92

    (47) RETURN -> return EXPRESSION . SEM_RETURN semicolon
    (113) SEM_RETURN -> . empty
    (80) empty -> .

    semicolon       reduce using rule 80 (empty -> .)

    SEM_RETURN                     shift and go to state 123
    empty                          shift and go to state 124

state 93

    (23) STATEMENTS -> STATEMENT STATEMENTS .

    rk              reduce using rule 23 (STATEMENTS -> STATEMENT STATEMENTS .)


state 94

    (114) SEM_PROGRAM_END -> empty .

    $end            reduce using rule 114 (SEM_PROGRAM_END -> empty .)


state 95

    (1) PROGRAM -> SEM_CODE_STARTS DECLARATIONS FUNCTIONS program id SEM_PROGRAM_STARTS BLOCK SEM_FILL_ERAS SEM_PROGRAM_END .

    $end            reduce using rule 1 (PROGRAM -> SEM_CODE_STARTS DECLARATIONS FUNCTIONS program id SEM_PROGRAM_STARTS BLOCK SEM_FILL_ERAS SEM_PROGRAM_END .)


state 96

    (19) FUNCPARAMETERS -> TYPE id SEM_ADD_PARAM .
    (20) FUNCPARAMETERS -> TYPE id SEM_ADD_PARAM . comma FUNCPARAMETERS

    rp              reduce using rule 19 (FUNCPARAMETERS -> TYPE id SEM_ADD_PARAM .)
    comma           shift and go to state 125


state 97

    (105) SEM_ADD_PARAM -> empty .

    comma           reduce using rule 105 (SEM_ADD_PARAM -> empty .)
    rp              reduce using rule 105 (SEM_ADD_PARAM -> empty .)


state 98

    (16) FUNCTION -> function FUNCTYPE id SEM_ADD_FUNC lp FUNCPARAMETERS rp lk . DECLARATIONS SEM_ADD_FUNC_START STATEMENTS rk SEM_END_FUNC
    (2) DECLARATIONS -> . VARDEC DECLARATIONS
    (3) DECLARATIONS -> . LISTDEC DECLARATIONS
    (4) DECLARATIONS -> . empty
    (5) VARDEC -> . var TYPE VARIDS semicolon
    (8) LISTDEC -> . list TYPE LISTIDS semicolon
    (80) empty -> .

    var             shift and go to state 9
    list            shift and go to state 6
    id              reduce using rule 80 (empty -> .)
    readto          reduce using rule 80 (empty -> .)
    print           reduce using rule 80 (empty -> .)
    if              reduce using rule 80 (empty -> .)
    while           reduce using rule 80 (empty -> .)
    return          reduce using rule 80 (empty -> .)
    rk              reduce using rule 80 (empty -> .)

    VARDEC                         shift and go to state 4
    DECLARATIONS                   shift and go to state 126
    LISTDEC                        shift and go to state 8
    empty                          shift and go to state 7

state 99

    (46) LOOP -> while SEM_PUSH_START lp . EXPRESSION rp SEM_GEN_GOTOF BLOCK SEM_FILL_LOOP
    (48) EXPRESSION -> . NOT SUPEREXP SEM_RESOLVE_NOT
    (49) EXPRESSION -> . NOT SUPEREXP SEM_RESOLVE_NOT and SEM_PUSH_OPERATOR NOT SUPEREXP SEM_RESOLVE_NOT SEM_RESOLVE_ANDOR
    (50) EXPRESSION -> . NOT SUPEREXP SEM_RESOLVE_NOT or SEM_PUSH_OPERATOR NOT SUPEREXP SEM_RESOLVE_NOT SEM_RESOLVE_ANDOR
    (51) NOT -> . not SEM_PUSH_OPERATOR
    (52) NOT -> . empty
    (80) empty -> .

    not             shift and go to state 89
    lp              reduce using rule 80 (empty -> .)
    plus            reduce using rule 80 (empty -> .)
    minus           reduce using rule 80 (empty -> .)
    id              reduce using rule 80 (empty -> .)
    c_int           reduce using rule 80 (empty -> .)
    c_decimal       reduce using rule 80 (empty -> .)
    c_string        reduce using rule 80 (empty -> .)
    false           reduce using rule 80 (empty -> .)
    true            reduce using rule 80 (empty -> .)

    empty                          shift and go to state 90
    NOT                            shift and go to state 91
    EXPRESSION                     shift and go to state 127

state 100

    (37) READ -> readto SEM_PUSH_OPERATOR lp . id SEM_PUSH_OPERAND SEM_GEN_READ rp semicolon

    id              shift and go to state 128


state 101

    (39) FUNCCALL -> id SEM_VERIFY_FUNC lp . SEM_GEN_ERA CALLPARAMETERS rp SEM_VERIFY_NUM_PARAMS semicolon SEM_GEN_GOSUB
    (108) SEM_GEN_ERA -> . empty
    (80) empty -> .

    not             reduce using rule 80 (empty -> .)
    rp              reduce using rule 80 (empty -> .)
    lp              reduce using rule 80 (empty -> .)
    plus            reduce using rule 80 (empty -> .)
    minus           reduce using rule 80 (empty -> .)
    id              reduce using rule 80 (empty -> .)
    c_int           reduce using rule 80 (empty -> .)
    c_decimal       reduce using rule 80 (empty -> .)
    c_string        reduce using rule 80 (empty -> .)
    false           reduce using rule 80 (empty -> .)
    true            reduce using rule 80 (empty -> .)

    SEM_GEN_ERA                    shift and go to state 129
    empty                          shift and go to state 130

state 102

    (35) LISTINDEX -> lb . EXP rb SEM_LIST_INDEX
    (61) EXP -> . TERM SEM_RESOLVE_PLUSMINUS
    (62) EXP -> . TERM SEM_RESOLVE_PLUSMINUS plus SEM_PUSH_OPERATOR EXP
    (63) EXP -> . TERM SEM_RESOLVE_PLUSMINUS minus SEM_PUSH_OPERATOR EXP
    (64) TERM -> . FACTOR SEM_RESOLVE_TIMESDIVIDE
    (65) TERM -> . FACTOR SEM_RESOLVE_TIMESDIVIDE times SEM_PUSH_OPERATOR TERM
    (66) TERM -> . FACTOR SEM_RESOLVE_TIMESDIVIDE divide SEM_PUSH_OPERATOR TERM
    (67) FACTOR -> . lp SEM_PUSH_PAREN EXPRESSION rp SEM_POP_PAREN
    (68) FACTOR -> . CONSTANT
    (69) FACTOR -> . plus CONSTANT
    (70) FACTOR -> . minus CONSTANT
    (71) CONSTANT -> . id SEM_PUSH_OPERAND LISTINDEX
    (72) CONSTANT -> . id SEM_VERIFY_FUNC lp SEM_PUSH_PAREN SEM_GEN_ERA CALLPARAMETERS rp SEM_POP_PAREN SEM_VERIFY_NUM_PARAMS SEM_GEN_GOSUB_ASSIGN
    (73) CONSTANT -> . c_int SEM_PUSH_CONSTANT
    (74) CONSTANT -> . c_decimal SEM_PUSH_CONSTANT
    (75) CONSTANT -> . c_string SEM_PUSH_CONSTANT
    (76) CONSTANT -> . false SEM_PUSH_CONSTANT
    (77) CONSTANT -> . true SEM_PUSH_CONSTANT

    lp              shift and go to state 115
    plus            shift and go to state 120
    minus           shift and go to state 122
    id              shift and go to state 112
    c_int           shift and go to state 117
    c_decimal       shift and go to state 118
    c_string        shift and go to state 116
    false           shift and go to state 111
    true            shift and go to state 114

    TERM                           shift and go to state 113
    CONSTANT                       shift and go to state 109
    EXP                            shift and go to state 131
    FACTOR                         shift and go to state 121

state 103

    (34) ASSIGN -> id SEM_PUSH_OPERAND LISTINDEX . equal SEM_PUSH_OPERATOR EXPRESSION SEM_ASSIGN semicolon
    (79) LISTREMOVE -> id SEM_PUSH_OPERAND LISTINDEX . dot remove semicolon SEM_REMOVE_FROM_LIST

    equal           shift and go to state 133
    dot             shift and go to state 132


state 104

    (78) LISTADD -> id SEM_PUSH_OPERAND dot . add lp EXP rp SEM_ADD_TO_LIST semicolon

    add             shift and go to state 134


state 105

    (36) LISTINDEX -> empty .

    equal           reduce using rule 36 (LISTINDEX -> empty .)
    dot             reduce using rule 36 (LISTINDEX -> empty .)
    times           reduce using rule 36 (LISTINDEX -> empty .)
    divide          reduce using rule 36 (LISTINDEX -> empty .)
    plus            reduce using rule 36 (LISTINDEX -> empty .)
    minus           reduce using rule 36 (LISTINDEX -> empty .)
    gt              reduce using rule 36 (LISTINDEX -> empty .)
    ge              reduce using rule 36 (LISTINDEX -> empty .)
    lt              reduce using rule 36 (LISTINDEX -> empty .)
    le              reduce using rule 36 (LISTINDEX -> empty .)
    ee              reduce using rule 36 (LISTINDEX -> empty .)
    ne              reduce using rule 36 (LISTINDEX -> empty .)
    and             reduce using rule 36 (LISTINDEX -> empty .)
    or              reduce using rule 36 (LISTINDEX -> empty .)
    semicolon       reduce using rule 36 (LISTINDEX -> empty .)
    rp              reduce using rule 36 (LISTINDEX -> empty .)
    comma           reduce using rule 36 (LISTINDEX -> empty .)
    rb              reduce using rule 36 (LISTINDEX -> empty .)


state 106

    (43) CONDITION -> if lp EXPRESSION . rp SEM_GEN_GOTOF BLOCK ELSEBLOCK SEM_FILL_END

    rp              shift and go to state 135


state 107

    (38) PRINT -> print SEM_PUSH_OPERATOR lp . EXPRESSION rp SEM_PRINT semicolon
    (48) EXPRESSION -> . NOT SUPEREXP SEM_RESOLVE_NOT
    (49) EXPRESSION -> . NOT SUPEREXP SEM_RESOLVE_NOT and SEM_PUSH_OPERATOR NOT SUPEREXP SEM_RESOLVE_NOT SEM_RESOLVE_ANDOR
    (50) EXPRESSION -> . NOT SUPEREXP SEM_RESOLVE_NOT or SEM_PUSH_OPERATOR NOT SUPEREXP SEM_RESOLVE_NOT SEM_RESOLVE_ANDOR
    (51) NOT -> . not SEM_PUSH_OPERATOR
    (52) NOT -> . empty
    (80) empty -> .

    not             shift and go to state 89
    lp              reduce using rule 80 (empty -> .)
    plus            reduce using rule 80 (empty -> .)
    minus           reduce using rule 80 (empty -> .)
    id              reduce using rule 80 (empty -> .)
    c_int           reduce using rule 80 (empty -> .)
    c_decimal       reduce using rule 80 (empty -> .)
    c_string        reduce using rule 80 (empty -> .)
    false           reduce using rule 80 (empty -> .)
    true            reduce using rule 80 (empty -> .)

    empty                          shift and go to state 90
    NOT                            shift and go to state 91
    EXPRESSION                     shift and go to state 136

state 108

    (51) NOT -> not SEM_PUSH_OPERATOR .

    lp              reduce using rule 51 (NOT -> not SEM_PUSH_OPERATOR .)
    plus            reduce using rule 51 (NOT -> not SEM_PUSH_OPERATOR .)
    minus           reduce using rule 51 (NOT -> not SEM_PUSH_OPERATOR .)
    id              reduce using rule 51 (NOT -> not SEM_PUSH_OPERATOR .)
    c_int           reduce using rule 51 (NOT -> not SEM_PUSH_OPERATOR .)
    c_decimal       reduce using rule 51 (NOT -> not SEM_PUSH_OPERATOR .)
    c_string        reduce using rule 51 (NOT -> not SEM_PUSH_OPERATOR .)
    false           reduce using rule 51 (NOT -> not SEM_PUSH_OPERATOR .)
    true            reduce using rule 51 (NOT -> not SEM_PUSH_OPERATOR .)


state 109

    (68) FACTOR -> CONSTANT .

    times           reduce using rule 68 (FACTOR -> CONSTANT .)
    divide          reduce using rule 68 (FACTOR -> CONSTANT .)
    plus            reduce using rule 68 (FACTOR -> CONSTANT .)
    minus           reduce using rule 68 (FACTOR -> CONSTANT .)
    gt              reduce using rule 68 (FACTOR -> CONSTANT .)
    ge              reduce using rule 68 (FACTOR -> CONSTANT .)
    lt              reduce using rule 68 (FACTOR -> CONSTANT .)
    le              reduce using rule 68 (FACTOR -> CONSTANT .)
    ee              reduce using rule 68 (FACTOR -> CONSTANT .)
    ne              reduce using rule 68 (FACTOR -> CONSTANT .)
    semicolon       reduce using rule 68 (FACTOR -> CONSTANT .)
    rp              reduce using rule 68 (FACTOR -> CONSTANT .)
    comma           reduce using rule 68 (FACTOR -> CONSTANT .)
    and             reduce using rule 68 (FACTOR -> CONSTANT .)
    or              reduce using rule 68 (FACTOR -> CONSTANT .)
    rb              reduce using rule 68 (FACTOR -> CONSTANT .)


state 110

    (53) SUPEREXP -> EXP .
    (54) SUPEREXP -> EXP . RELOP EXP SEM_RESOLVE_RELOP
    (55) RELOP -> . gt SEM_PUSH_OPERATOR
    (56) RELOP -> . ge SEM_PUSH_OPERATOR
    (57) RELOP -> . lt SEM_PUSH_OPERATOR
    (58) RELOP -> . le SEM_PUSH_OPERATOR
    (59) RELOP -> . ee SEM_PUSH_OPERATOR
    (60) RELOP -> . ne SEM_PUSH_OPERATOR

    semicolon       reduce using rule 53 (SUPEREXP -> EXP .)
    rp              reduce using rule 53 (SUPEREXP -> EXP .)
    comma           reduce using rule 53 (SUPEREXP -> EXP .)
    and             reduce using rule 53 (SUPEREXP -> EXP .)
    or              reduce using rule 53 (SUPEREXP -> EXP .)
    gt              shift and go to state 137
    ge              shift and go to state 142
    lt              shift and go to state 140
    le              shift and go to state 143
    ee              shift and go to state 139
    ne              shift and go to state 141

    RELOP                          shift and go to state 138

state 111

    (76) CONSTANT -> false . SEM_PUSH_CONSTANT
    (95) SEM_PUSH_CONSTANT -> . empty
    (80) empty -> .

    times           reduce using rule 80 (empty -> .)
    divide          reduce using rule 80 (empty -> .)
    plus            reduce using rule 80 (empty -> .)
    minus           reduce using rule 80 (empty -> .)
    gt              reduce using rule 80 (empty -> .)
    ge              reduce using rule 80 (empty -> .)
    lt              reduce using rule 80 (empty -> .)
    le              reduce using rule 80 (empty -> .)
    ee              reduce using rule 80 (empty -> .)
    ne              reduce using rule 80 (empty -> .)
    and             reduce using rule 80 (empty -> .)
    or              reduce using rule 80 (empty -> .)
    semicolon       reduce using rule 80 (empty -> .)
    rp              reduce using rule 80 (empty -> .)
    comma           reduce using rule 80 (empty -> .)
    rb              reduce using rule 80 (empty -> .)

    empty                          shift and go to state 144
    SEM_PUSH_CONSTANT              shift and go to state 145

state 112

    (71) CONSTANT -> id . SEM_PUSH_OPERAND LISTINDEX
    (72) CONSTANT -> id . SEM_VERIFY_FUNC lp SEM_PUSH_PAREN SEM_GEN_ERA CALLPARAMETERS rp SEM_POP_PAREN SEM_VERIFY_NUM_PARAMS SEM_GEN_GOSUB_ASSIGN
    (88) SEM_PUSH_OPERAND -> . empty
    (107) SEM_VERIFY_FUNC -> . empty
    (80) empty -> .

    lb              reduce using rule 80 (empty -> .)
    times           reduce using rule 80 (empty -> .)
    divide          reduce using rule 80 (empty -> .)
    plus            reduce using rule 80 (empty -> .)
    minus           reduce using rule 80 (empty -> .)
    gt              reduce using rule 80 (empty -> .)
    ge              reduce using rule 80 (empty -> .)
    lt              reduce using rule 80 (empty -> .)
    le              reduce using rule 80 (empty -> .)
    ee              reduce using rule 80 (empty -> .)
    ne              reduce using rule 80 (empty -> .)
    and             reduce using rule 80 (empty -> .)
    or              reduce using rule 80 (empty -> .)
    semicolon       reduce using rule 80 (empty -> .)
    rp              reduce using rule 80 (empty -> .)
    comma           reduce using rule 80 (empty -> .)
    rb              reduce using rule 80 (empty -> .)
    lp              reduce using rule 80 (empty -> .)

    SEM_PUSH_OPERAND               shift and go to state 146
    SEM_VERIFY_FUNC                shift and go to state 147
    empty                          shift and go to state 85

state 113

    (61) EXP -> TERM . SEM_RESOLVE_PLUSMINUS
    (62) EXP -> TERM . SEM_RESOLVE_PLUSMINUS plus SEM_PUSH_OPERATOR EXP
    (63) EXP -> TERM . SEM_RESOLVE_PLUSMINUS minus SEM_PUSH_OPERATOR EXP
    (90) SEM_RESOLVE_PLUSMINUS -> . empty
    (80) empty -> .

    plus            reduce using rule 80 (empty -> .)
    minus           reduce using rule 80 (empty -> .)
    gt              reduce using rule 80 (empty -> .)
    ge              reduce using rule 80 (empty -> .)
    lt              reduce using rule 80 (empty -> .)
    le              reduce using rule 80 (empty -> .)
    ee              reduce using rule 80 (empty -> .)
    ne              reduce using rule 80 (empty -> .)
    and             reduce using rule 80 (empty -> .)
    or              reduce using rule 80 (empty -> .)
    semicolon       reduce using rule 80 (empty -> .)
    rp              reduce using rule 80 (empty -> .)
    comma           reduce using rule 80 (empty -> .)
    rb              reduce using rule 80 (empty -> .)

    SEM_RESOLVE_PLUSMINUS          shift and go to state 148
    empty                          shift and go to state 149

state 114

    (77) CONSTANT -> true . SEM_PUSH_CONSTANT
    (95) SEM_PUSH_CONSTANT -> . empty
    (80) empty -> .

    times           reduce using rule 80 (empty -> .)
    divide          reduce using rule 80 (empty -> .)
    plus            reduce using rule 80 (empty -> .)
    minus           reduce using rule 80 (empty -> .)
    gt              reduce using rule 80 (empty -> .)
    ge              reduce using rule 80 (empty -> .)
    lt              reduce using rule 80 (empty -> .)
    le              reduce using rule 80 (empty -> .)
    ee              reduce using rule 80 (empty -> .)
    ne              reduce using rule 80 (empty -> .)
    and             reduce using rule 80 (empty -> .)
    or              reduce using rule 80 (empty -> .)
    semicolon       reduce using rule 80 (empty -> .)
    rp              reduce using rule 80 (empty -> .)
    comma           reduce using rule 80 (empty -> .)
    rb              reduce using rule 80 (empty -> .)

    empty                          shift and go to state 144
    SEM_PUSH_CONSTANT              shift and go to state 150

state 115

    (67) FACTOR -> lp . SEM_PUSH_PAREN EXPRESSION rp SEM_POP_PAREN
    (92) SEM_PUSH_PAREN -> . empty
    (80) empty -> .

    not             reduce using rule 80 (empty -> .)
    lp              reduce using rule 80 (empty -> .)
    plus            reduce using rule 80 (empty -> .)
    minus           reduce using rule 80 (empty -> .)
    id              reduce using rule 80 (empty -> .)
    c_int           reduce using rule 80 (empty -> .)
    c_decimal       reduce using rule 80 (empty -> .)
    c_string        reduce using rule 80 (empty -> .)
    false           reduce using rule 80 (empty -> .)
    true            reduce using rule 80 (empty -> .)

    empty                          shift and go to state 152
    SEM_PUSH_PAREN                 shift and go to state 151

state 116

    (75) CONSTANT -> c_string . SEM_PUSH_CONSTANT
    (95) SEM_PUSH_CONSTANT -> . empty
    (80) empty -> .

    times           reduce using rule 80 (empty -> .)
    divide          reduce using rule 80 (empty -> .)
    plus            reduce using rule 80 (empty -> .)
    minus           reduce using rule 80 (empty -> .)
    gt              reduce using rule 80 (empty -> .)
    ge              reduce using rule 80 (empty -> .)
    lt              reduce using rule 80 (empty -> .)
    le              reduce using rule 80 (empty -> .)
    ee              reduce using rule 80 (empty -> .)
    ne              reduce using rule 80 (empty -> .)
    and             reduce using rule 80 (empty -> .)
    or              reduce using rule 80 (empty -> .)
    semicolon       reduce using rule 80 (empty -> .)
    rp              reduce using rule 80 (empty -> .)
    comma           reduce using rule 80 (empty -> .)
    rb              reduce using rule 80 (empty -> .)

    empty                          shift and go to state 144
    SEM_PUSH_CONSTANT              shift and go to state 153

state 117

    (73) CONSTANT -> c_int . SEM_PUSH_CONSTANT
    (95) SEM_PUSH_CONSTANT -> . empty
    (80) empty -> .

    times           reduce using rule 80 (empty -> .)
    divide          reduce using rule 80 (empty -> .)
    plus            reduce using rule 80 (empty -> .)
    minus           reduce using rule 80 (empty -> .)
    gt              reduce using rule 80 (empty -> .)
    ge              reduce using rule 80 (empty -> .)
    lt              reduce using rule 80 (empty -> .)
    le              reduce using rule 80 (empty -> .)
    ee              reduce using rule 80 (empty -> .)
    ne              reduce using rule 80 (empty -> .)
    and             reduce using rule 80 (empty -> .)
    or              reduce using rule 80 (empty -> .)
    semicolon       reduce using rule 80 (empty -> .)
    rp              reduce using rule 80 (empty -> .)
    comma           reduce using rule 80 (empty -> .)
    rb              reduce using rule 80 (empty -> .)

    empty                          shift and go to state 144
    SEM_PUSH_CONSTANT              shift and go to state 154

state 118

    (74) CONSTANT -> c_decimal . SEM_PUSH_CONSTANT
    (95) SEM_PUSH_CONSTANT -> . empty
    (80) empty -> .

    times           reduce using rule 80 (empty -> .)
    divide          reduce using rule 80 (empty -> .)
    plus            reduce using rule 80 (empty -> .)
    minus           reduce using rule 80 (empty -> .)
    gt              reduce using rule 80 (empty -> .)
    ge              reduce using rule 80 (empty -> .)
    lt              reduce using rule 80 (empty -> .)
    le              reduce using rule 80 (empty -> .)
    ee              reduce using rule 80 (empty -> .)
    ne              reduce using rule 80 (empty -> .)
    and             reduce using rule 80 (empty -> .)
    or              reduce using rule 80 (empty -> .)
    semicolon       reduce using rule 80 (empty -> .)
    rp              reduce using rule 80 (empty -> .)
    comma           reduce using rule 80 (empty -> .)
    rb              reduce using rule 80 (empty -> .)

    empty                          shift and go to state 144
    SEM_PUSH_CONSTANT              shift and go to state 155

state 119

    (48) EXPRESSION -> NOT SUPEREXP . SEM_RESOLVE_NOT
    (49) EXPRESSION -> NOT SUPEREXP . SEM_RESOLVE_NOT and SEM_PUSH_OPERATOR NOT SUPEREXP SEM_RESOLVE_NOT SEM_RESOLVE_ANDOR
    (50) EXPRESSION -> NOT SUPEREXP . SEM_RESOLVE_NOT or SEM_PUSH_OPERATOR NOT SUPEREXP SEM_RESOLVE_NOT SEM_RESOLVE_ANDOR
    (99) SEM_RESOLVE_NOT -> . empty
    (80) empty -> .

    and             reduce using rule 80 (empty -> .)
    or              reduce using rule 80 (empty -> .)
    semicolon       reduce using rule 80 (empty -> .)
    rp              reduce using rule 80 (empty -> .)
    comma           reduce using rule 80 (empty -> .)

    SEM_RESOLVE_NOT                shift and go to state 156
    empty                          shift and go to state 157

state 120

    (69) FACTOR -> plus . CONSTANT
    (71) CONSTANT -> . id SEM_PUSH_OPERAND LISTINDEX
    (72) CONSTANT -> . id SEM_VERIFY_FUNC lp SEM_PUSH_PAREN SEM_GEN_ERA CALLPARAMETERS rp SEM_POP_PAREN SEM_VERIFY_NUM_PARAMS SEM_GEN_GOSUB_ASSIGN
    (73) CONSTANT -> . c_int SEM_PUSH_CONSTANT
    (74) CONSTANT -> . c_decimal SEM_PUSH_CONSTANT
    (75) CONSTANT -> . c_string SEM_PUSH_CONSTANT
    (76) CONSTANT -> . false SEM_PUSH_CONSTANT
    (77) CONSTANT -> . true SEM_PUSH_CONSTANT

    id              shift and go to state 112
    c_int           shift and go to state 117
    c_decimal       shift and go to state 118
    c_string        shift and go to state 116
    false           shift and go to state 111
    true            shift and go to state 114

    CONSTANT                       shift and go to state 158

state 121

    (64) TERM -> FACTOR . SEM_RESOLVE_TIMESDIVIDE
    (65) TERM -> FACTOR . SEM_RESOLVE_TIMESDIVIDE times SEM_PUSH_OPERATOR TERM
    (66) TERM -> FACTOR . SEM_RESOLVE_TIMESDIVIDE divide SEM_PUSH_OPERATOR TERM
    (91) SEM_RESOLVE_TIMESDIVIDE -> . empty
    (80) empty -> .

    times           reduce using rule 80 (empty -> .)
    divide          reduce using rule 80 (empty -> .)
    plus            reduce using rule 80 (empty -> .)
    minus           reduce using rule 80 (empty -> .)
    gt              reduce using rule 80 (empty -> .)
    ge              reduce using rule 80 (empty -> .)
    lt              reduce using rule 80 (empty -> .)
    le              reduce using rule 80 (empty -> .)
    ee              reduce using rule 80 (empty -> .)
    ne              reduce using rule 80 (empty -> .)
    and             reduce using rule 80 (empty -> .)
    or              reduce using rule 80 (empty -> .)
    semicolon       reduce using rule 80 (empty -> .)
    rp              reduce using rule 80 (empty -> .)
    comma           reduce using rule 80 (empty -> .)
    rb              reduce using rule 80 (empty -> .)

    SEM_RESOLVE_TIMESDIVIDE        shift and go to state 159
    empty                          shift and go to state 160

state 122

    (70) FACTOR -> minus . CONSTANT
    (71) CONSTANT -> . id SEM_PUSH_OPERAND LISTINDEX
    (72) CONSTANT -> . id SEM_VERIFY_FUNC lp SEM_PUSH_PAREN SEM_GEN_ERA CALLPARAMETERS rp SEM_POP_PAREN SEM_VERIFY_NUM_PARAMS SEM_GEN_GOSUB_ASSIGN
    (73) CONSTANT -> . c_int SEM_PUSH_CONSTANT
    (74) CONSTANT -> . c_decimal SEM_PUSH_CONSTANT
    (75) CONSTANT -> . c_string SEM_PUSH_CONSTANT
    (76) CONSTANT -> . false SEM_PUSH_CONSTANT
    (77) CONSTANT -> . true SEM_PUSH_CONSTANT

    id              shift and go to state 112
    c_int           shift and go to state 117
    c_decimal       shift and go to state 118
    c_string        shift and go to state 116
    false           shift and go to state 111
    true            shift and go to state 114

    CONSTANT                       shift and go to state 161

state 123

    (47) RETURN -> return EXPRESSION SEM_RETURN . semicolon

    semicolon       shift and go to state 162


state 124

    (113) SEM_RETURN -> empty .

    semicolon       reduce using rule 113 (SEM_RETURN -> empty .)


state 125

    (20) FUNCPARAMETERS -> TYPE id SEM_ADD_PARAM comma . FUNCPARAMETERS
    (19) FUNCPARAMETERS -> . TYPE id SEM_ADD_PARAM
    (20) FUNCPARAMETERS -> . TYPE id SEM_ADD_PARAM comma FUNCPARAMETERS
    (21) FUNCPARAMETERS -> . empty
    (11) TYPE -> . int SEM_STORE_TYPE
    (12) TYPE -> . decimal SEM_STORE_TYPE
    (13) TYPE -> . bool SEM_STORE_TYPE
    (80) empty -> .

    int             shift and go to state 15
    decimal         shift and go to state 16
    bool            shift and go to state 17
    rp              reduce using rule 80 (empty -> .)

    FUNCPARAMETERS                 shift and go to state 163
    TYPE                           shift and go to state 54
    empty                          shift and go to state 55

state 126

    (16) FUNCTION -> function FUNCTYPE id SEM_ADD_FUNC lp FUNCPARAMETERS rp lk DECLARATIONS . SEM_ADD_FUNC_START STATEMENTS rk SEM_END_FUNC
    (106) SEM_ADD_FUNC_START -> . empty
    (80) empty -> .

    id              reduce using rule 80 (empty -> .)
    readto          reduce using rule 80 (empty -> .)
    print           reduce using rule 80 (empty -> .)
    if              reduce using rule 80 (empty -> .)
    while           reduce using rule 80 (empty -> .)
    return          reduce using rule 80 (empty -> .)
    rk              reduce using rule 80 (empty -> .)

    SEM_ADD_FUNC_START             shift and go to state 164
    empty                          shift and go to state 165

state 127

    (46) LOOP -> while SEM_PUSH_START lp EXPRESSION . rp SEM_GEN_GOTOF BLOCK SEM_FILL_LOOP

    rp              shift and go to state 166


state 128

    (37) READ -> readto SEM_PUSH_OPERATOR lp id . SEM_PUSH_OPERAND SEM_GEN_READ rp semicolon
    (88) SEM_PUSH_OPERAND -> . empty
    (80) empty -> .

    rp              reduce using rule 80 (empty -> .)

    SEM_PUSH_OPERAND               shift and go to state 167
    empty                          shift and go to state 168

state 129

    (39) FUNCCALL -> id SEM_VERIFY_FUNC lp SEM_GEN_ERA . CALLPARAMETERS rp SEM_VERIFY_NUM_PARAMS semicolon SEM_GEN_GOSUB
    (40) CALLPARAMETERS -> . EXPRESSION SEM_MATCH_PARAM
    (41) CALLPARAMETERS -> . EXPRESSION SEM_MATCH_PARAM comma CALLPARAMETERS
    (42) CALLPARAMETERS -> . empty
    (48) EXPRESSION -> . NOT SUPEREXP SEM_RESOLVE_NOT
    (49) EXPRESSION -> . NOT SUPEREXP SEM_RESOLVE_NOT and SEM_PUSH_OPERATOR NOT SUPEREXP SEM_RESOLVE_NOT SEM_RESOLVE_ANDOR
    (50) EXPRESSION -> . NOT SUPEREXP SEM_RESOLVE_NOT or SEM_PUSH_OPERATOR NOT SUPEREXP SEM_RESOLVE_NOT SEM_RESOLVE_ANDOR
    (80) empty -> .
    (51) NOT -> . not SEM_PUSH_OPERATOR
    (52) NOT -> . empty

    rp              reduce using rule 80 (empty -> .)
    lp              reduce using rule 80 (empty -> .)
    plus            reduce using rule 80 (empty -> .)
    minus           reduce using rule 80 (empty -> .)
    id              reduce using rule 80 (empty -> .)
    c_int           reduce using rule 80 (empty -> .)
    c_decimal       reduce using rule 80 (empty -> .)
    c_string        reduce using rule 80 (empty -> .)
    false           reduce using rule 80 (empty -> .)
    true            reduce using rule 80 (empty -> .)
    not             shift and go to state 89

    CALLPARAMETERS                 shift and go to state 169
    NOT                            shift and go to state 91
    EXPRESSION                     shift and go to state 170
    empty                          shift and go to state 171

state 130

    (108) SEM_GEN_ERA -> empty .

    not             reduce using rule 108 (SEM_GEN_ERA -> empty .)
    rp              reduce using rule 108 (SEM_GEN_ERA -> empty .)
    lp              reduce using rule 108 (SEM_GEN_ERA -> empty .)
    plus            reduce using rule 108 (SEM_GEN_ERA -> empty .)
    minus           reduce using rule 108 (SEM_GEN_ERA -> empty .)
    id              reduce using rule 108 (SEM_GEN_ERA -> empty .)
    c_int           reduce using rule 108 (SEM_GEN_ERA -> empty .)
    c_decimal       reduce using rule 108 (SEM_GEN_ERA -> empty .)
    c_string        reduce using rule 108 (SEM_GEN_ERA -> empty .)
    false           reduce using rule 108 (SEM_GEN_ERA -> empty .)
    true            reduce using rule 108 (SEM_GEN_ERA -> empty .)


state 131

    (35) LISTINDEX -> lb EXP . rb SEM_LIST_INDEX

    rb              shift and go to state 172


state 132

    (79) LISTREMOVE -> id SEM_PUSH_OPERAND LISTINDEX dot . remove semicolon SEM_REMOVE_FROM_LIST

    remove          shift and go to state 173


state 133

    (34) ASSIGN -> id SEM_PUSH_OPERAND LISTINDEX equal . SEM_PUSH_OPERATOR EXPRESSION SEM_ASSIGN semicolon
    (89) SEM_PUSH_OPERATOR -> . empty
    (80) empty -> .

    not             reduce using rule 80 (empty -> .)
    lp              reduce using rule 80 (empty -> .)
    plus            reduce using rule 80 (empty -> .)
    minus           reduce using rule 80 (empty -> .)
    id              reduce using rule 80 (empty -> .)
    c_int           reduce using rule 80 (empty -> .)
    c_decimal       reduce using rule 80 (empty -> .)
    c_string        reduce using rule 80 (empty -> .)
    false           reduce using rule 80 (empty -> .)
    true            reduce using rule 80 (empty -> .)

    SEM_PUSH_OPERATOR              shift and go to state 174
    empty                          shift and go to state 82

state 134

    (78) LISTADD -> id SEM_PUSH_OPERAND dot add . lp EXP rp SEM_ADD_TO_LIST semicolon

    lp              shift and go to state 175


state 135

    (43) CONDITION -> if lp EXPRESSION rp . SEM_GEN_GOTOF BLOCK ELSEBLOCK SEM_FILL_END
    (100) SEM_GEN_GOTOF -> . empty
    (80) empty -> .

    lk              reduce using rule 80 (empty -> .)

    SEM_GEN_GOTOF                  shift and go to state 176
    empty                          shift and go to state 177

state 136

    (38) PRINT -> print SEM_PUSH_OPERATOR lp EXPRESSION . rp SEM_PRINT semicolon

    rp              shift and go to state 178


state 137

    (55) RELOP -> gt . SEM_PUSH_OPERATOR
    (89) SEM_PUSH_OPERATOR -> . empty
    (80) empty -> .

    lp              reduce using rule 80 (empty -> .)
    plus            reduce using rule 80 (empty -> .)
    minus           reduce using rule 80 (empty -> .)
    id              reduce using rule 80 (empty -> .)
    c_int           reduce using rule 80 (empty -> .)
    c_decimal       reduce using rule 80 (empty -> .)
    c_string        reduce using rule 80 (empty -> .)
    false           reduce using rule 80 (empty -> .)
    true            reduce using rule 80 (empty -> .)

    empty                          shift and go to state 82
    SEM_PUSH_OPERATOR              shift and go to state 179

state 138

    (54) SUPEREXP -> EXP RELOP . EXP SEM_RESOLVE_RELOP
    (61) EXP -> . TERM SEM_RESOLVE_PLUSMINUS
    (62) EXP -> . TERM SEM_RESOLVE_PLUSMINUS plus SEM_PUSH_OPERATOR EXP
    (63) EXP -> . TERM SEM_RESOLVE_PLUSMINUS minus SEM_PUSH_OPERATOR EXP
    (64) TERM -> . FACTOR SEM_RESOLVE_TIMESDIVIDE
    (65) TERM -> . FACTOR SEM_RESOLVE_TIMESDIVIDE times SEM_PUSH_OPERATOR TERM
    (66) TERM -> . FACTOR SEM_RESOLVE_TIMESDIVIDE divide SEM_PUSH_OPERATOR TERM
    (67) FACTOR -> . lp SEM_PUSH_PAREN EXPRESSION rp SEM_POP_PAREN
    (68) FACTOR -> . CONSTANT
    (69) FACTOR -> . plus CONSTANT
    (70) FACTOR -> . minus CONSTANT
    (71) CONSTANT -> . id SEM_PUSH_OPERAND LISTINDEX
    (72) CONSTANT -> . id SEM_VERIFY_FUNC lp SEM_PUSH_PAREN SEM_GEN_ERA CALLPARAMETERS rp SEM_POP_PAREN SEM_VERIFY_NUM_PARAMS SEM_GEN_GOSUB_ASSIGN
    (73) CONSTANT -> . c_int SEM_PUSH_CONSTANT
    (74) CONSTANT -> . c_decimal SEM_PUSH_CONSTANT
    (75) CONSTANT -> . c_string SEM_PUSH_CONSTANT
    (76) CONSTANT -> . false SEM_PUSH_CONSTANT
    (77) CONSTANT -> . true SEM_PUSH_CONSTANT

    lp              shift and go to state 115
    plus            shift and go to state 120
    minus           shift and go to state 122
    id              shift and go to state 112
    c_int           shift and go to state 117
    c_decimal       shift and go to state 118
    c_string        shift and go to state 116
    false           shift and go to state 111
    true            shift and go to state 114

    TERM                           shift and go to state 113
    CONSTANT                       shift and go to state 109
    EXP                            shift and go to state 180
    FACTOR                         shift and go to state 121

state 139

    (59) RELOP -> ee . SEM_PUSH_OPERATOR
    (89) SEM_PUSH_OPERATOR -> . empty
    (80) empty -> .

    lp              reduce using rule 80 (empty -> .)
    plus            reduce using rule 80 (empty -> .)
    minus           reduce using rule 80 (empty -> .)
    id              reduce using rule 80 (empty -> .)
    c_int           reduce using rule 80 (empty -> .)
    c_decimal       reduce using rule 80 (empty -> .)
    c_string        reduce using rule 80 (empty -> .)
    false           reduce using rule 80 (empty -> .)
    true            reduce using rule 80 (empty -> .)

    empty                          shift and go to state 82
    SEM_PUSH_OPERATOR              shift and go to state 181

state 140

    (57) RELOP -> lt . SEM_PUSH_OPERATOR
    (89) SEM_PUSH_OPERATOR -> . empty
    (80) empty -> .

    lp              reduce using rule 80 (empty -> .)
    plus            reduce using rule 80 (empty -> .)
    minus           reduce using rule 80 (empty -> .)
    id              reduce using rule 80 (empty -> .)
    c_int           reduce using rule 80 (empty -> .)
    c_decimal       reduce using rule 80 (empty -> .)
    c_string        reduce using rule 80 (empty -> .)
    false           reduce using rule 80 (empty -> .)
    true            reduce using rule 80 (empty -> .)

    empty                          shift and go to state 82
    SEM_PUSH_OPERATOR              shift and go to state 182

state 141

    (60) RELOP -> ne . SEM_PUSH_OPERATOR
    (89) SEM_PUSH_OPERATOR -> . empty
    (80) empty -> .

    lp              reduce using rule 80 (empty -> .)
    plus            reduce using rule 80 (empty -> .)
    minus           reduce using rule 80 (empty -> .)
    id              reduce using rule 80 (empty -> .)
    c_int           reduce using rule 80 (empty -> .)
    c_decimal       reduce using rule 80 (empty -> .)
    c_string        reduce using rule 80 (empty -> .)
    false           reduce using rule 80 (empty -> .)
    true            reduce using rule 80 (empty -> .)

    empty                          shift and go to state 82
    SEM_PUSH_OPERATOR              shift and go to state 183

state 142

    (56) RELOP -> ge . SEM_PUSH_OPERATOR
    (89) SEM_PUSH_OPERATOR -> . empty
    (80) empty -> .

    lp              reduce using rule 80 (empty -> .)
    plus            reduce using rule 80 (empty -> .)
    minus           reduce using rule 80 (empty -> .)
    id              reduce using rule 80 (empty -> .)
    c_int           reduce using rule 80 (empty -> .)
    c_decimal       reduce using rule 80 (empty -> .)
    c_string        reduce using rule 80 (empty -> .)
    false           reduce using rule 80 (empty -> .)
    true            reduce using rule 80 (empty -> .)

    empty                          shift and go to state 82
    SEM_PUSH_OPERATOR              shift and go to state 184

state 143

    (58) RELOP -> le . SEM_PUSH_OPERATOR
    (89) SEM_PUSH_OPERATOR -> . empty
    (80) empty -> .

    lp              reduce using rule 80 (empty -> .)
    plus            reduce using rule 80 (empty -> .)
    minus           reduce using rule 80 (empty -> .)
    id              reduce using rule 80 (empty -> .)
    c_int           reduce using rule 80 (empty -> .)
    c_decimal       reduce using rule 80 (empty -> .)
    c_string        reduce using rule 80 (empty -> .)
    false           reduce using rule 80 (empty -> .)
    true            reduce using rule 80 (empty -> .)

    empty                          shift and go to state 82
    SEM_PUSH_OPERATOR              shift and go to state 185

state 144

    (95) SEM_PUSH_CONSTANT -> empty .

    times           reduce using rule 95 (SEM_PUSH_CONSTANT -> empty .)
    divide          reduce using rule 95 (SEM_PUSH_CONSTANT -> empty .)
    plus            reduce using rule 95 (SEM_PUSH_CONSTANT -> empty .)
    minus           reduce using rule 95 (SEM_PUSH_CONSTANT -> empty .)
    gt              reduce using rule 95 (SEM_PUSH_CONSTANT -> empty .)
    ge              reduce using rule 95 (SEM_PUSH_CONSTANT -> empty .)
    lt              reduce using rule 95 (SEM_PUSH_CONSTANT -> empty .)
    le              reduce using rule 95 (SEM_PUSH_CONSTANT -> empty .)
    ee              reduce using rule 95 (SEM_PUSH_CONSTANT -> empty .)
    ne              reduce using rule 95 (SEM_PUSH_CONSTANT -> empty .)
    and             reduce using rule 95 (SEM_PUSH_CONSTANT -> empty .)
    or              reduce using rule 95 (SEM_PUSH_CONSTANT -> empty .)
    semicolon       reduce using rule 95 (SEM_PUSH_CONSTANT -> empty .)
    rp              reduce using rule 95 (SEM_PUSH_CONSTANT -> empty .)
    comma           reduce using rule 95 (SEM_PUSH_CONSTANT -> empty .)
    rb              reduce using rule 95 (SEM_PUSH_CONSTANT -> empty .)


state 145

    (76) CONSTANT -> false SEM_PUSH_CONSTANT .

    times           reduce using rule 76 (CONSTANT -> false SEM_PUSH_CONSTANT .)
    divide          reduce using rule 76 (CONSTANT -> false SEM_PUSH_CONSTANT .)
    plus            reduce using rule 76 (CONSTANT -> false SEM_PUSH_CONSTANT .)
    minus           reduce using rule 76 (CONSTANT -> false SEM_PUSH_CONSTANT .)
    gt              reduce using rule 76 (CONSTANT -> false SEM_PUSH_CONSTANT .)
    ge              reduce using rule 76 (CONSTANT -> false SEM_PUSH_CONSTANT .)
    lt              reduce using rule 76 (CONSTANT -> false SEM_PUSH_CONSTANT .)
    le              reduce using rule 76 (CONSTANT -> false SEM_PUSH_CONSTANT .)
    ee              reduce using rule 76 (CONSTANT -> false SEM_PUSH_CONSTANT .)
    ne              reduce using rule 76 (CONSTANT -> false SEM_PUSH_CONSTANT .)
    and             reduce using rule 76 (CONSTANT -> false SEM_PUSH_CONSTANT .)
    or              reduce using rule 76 (CONSTANT -> false SEM_PUSH_CONSTANT .)
    semicolon       reduce using rule 76 (CONSTANT -> false SEM_PUSH_CONSTANT .)
    rp              reduce using rule 76 (CONSTANT -> false SEM_PUSH_CONSTANT .)
    comma           reduce using rule 76 (CONSTANT -> false SEM_PUSH_CONSTANT .)
    rb              reduce using rule 76 (CONSTANT -> false SEM_PUSH_CONSTANT .)


state 146

    (71) CONSTANT -> id SEM_PUSH_OPERAND . LISTINDEX
    (35) LISTINDEX -> . lb EXP rb SEM_LIST_INDEX
    (36) LISTINDEX -> . empty
    (80) empty -> .

    lb              shift and go to state 102
    times           reduce using rule 80 (empty -> .)
    divide          reduce using rule 80 (empty -> .)
    plus            reduce using rule 80 (empty -> .)
    minus           reduce using rule 80 (empty -> .)
    gt              reduce using rule 80 (empty -> .)
    ge              reduce using rule 80 (empty -> .)
    lt              reduce using rule 80 (empty -> .)
    le              reduce using rule 80 (empty -> .)
    ee              reduce using rule 80 (empty -> .)
    ne              reduce using rule 80 (empty -> .)
    and             reduce using rule 80 (empty -> .)
    or              reduce using rule 80 (empty -> .)
    semicolon       reduce using rule 80 (empty -> .)
    rp              reduce using rule 80 (empty -> .)
    comma           reduce using rule 80 (empty -> .)
    rb              reduce using rule 80 (empty -> .)

    empty                          shift and go to state 105
    LISTINDEX                      shift and go to state 186

state 147

    (72) CONSTANT -> id SEM_VERIFY_FUNC . lp SEM_PUSH_PAREN SEM_GEN_ERA CALLPARAMETERS rp SEM_POP_PAREN SEM_VERIFY_NUM_PARAMS SEM_GEN_GOSUB_ASSIGN

    lp              shift and go to state 187


state 148

    (61) EXP -> TERM SEM_RESOLVE_PLUSMINUS .
    (62) EXP -> TERM SEM_RESOLVE_PLUSMINUS . plus SEM_PUSH_OPERATOR EXP
    (63) EXP -> TERM SEM_RESOLVE_PLUSMINUS . minus SEM_PUSH_OPERATOR EXP

    and             reduce using rule 61 (EXP -> TERM SEM_RESOLVE_PLUSMINUS .)
    or              reduce using rule 61 (EXP -> TERM SEM_RESOLVE_PLUSMINUS .)
    semicolon       reduce using rule 61 (EXP -> TERM SEM_RESOLVE_PLUSMINUS .)
    rp              reduce using rule 61 (EXP -> TERM SEM_RESOLVE_PLUSMINUS .)
    comma           reduce using rule 61 (EXP -> TERM SEM_RESOLVE_PLUSMINUS .)
    gt              reduce using rule 61 (EXP -> TERM SEM_RESOLVE_PLUSMINUS .)
    ge              reduce using rule 61 (EXP -> TERM SEM_RESOLVE_PLUSMINUS .)
    lt              reduce using rule 61 (EXP -> TERM SEM_RESOLVE_PLUSMINUS .)
    le              reduce using rule 61 (EXP -> TERM SEM_RESOLVE_PLUSMINUS .)
    ee              reduce using rule 61 (EXP -> TERM SEM_RESOLVE_PLUSMINUS .)
    ne              reduce using rule 61 (EXP -> TERM SEM_RESOLVE_PLUSMINUS .)
    rb              reduce using rule 61 (EXP -> TERM SEM_RESOLVE_PLUSMINUS .)
    plus            shift and go to state 188
    minus           shift and go to state 189


state 149

    (90) SEM_RESOLVE_PLUSMINUS -> empty .

    plus            reduce using rule 90 (SEM_RESOLVE_PLUSMINUS -> empty .)
    minus           reduce using rule 90 (SEM_RESOLVE_PLUSMINUS -> empty .)
    gt              reduce using rule 90 (SEM_RESOLVE_PLUSMINUS -> empty .)
    ge              reduce using rule 90 (SEM_RESOLVE_PLUSMINUS -> empty .)
    lt              reduce using rule 90 (SEM_RESOLVE_PLUSMINUS -> empty .)
    le              reduce using rule 90 (SEM_RESOLVE_PLUSMINUS -> empty .)
    ee              reduce using rule 90 (SEM_RESOLVE_PLUSMINUS -> empty .)
    ne              reduce using rule 90 (SEM_RESOLVE_PLUSMINUS -> empty .)
    and             reduce using rule 90 (SEM_RESOLVE_PLUSMINUS -> empty .)
    or              reduce using rule 90 (SEM_RESOLVE_PLUSMINUS -> empty .)
    semicolon       reduce using rule 90 (SEM_RESOLVE_PLUSMINUS -> empty .)
    rp              reduce using rule 90 (SEM_RESOLVE_PLUSMINUS -> empty .)
    comma           reduce using rule 90 (SEM_RESOLVE_PLUSMINUS -> empty .)
    rb              reduce using rule 90 (SEM_RESOLVE_PLUSMINUS -> empty .)


state 150

    (77) CONSTANT -> true SEM_PUSH_CONSTANT .

    times           reduce using rule 77 (CONSTANT -> true SEM_PUSH_CONSTANT .)
    divide          reduce using rule 77 (CONSTANT -> true SEM_PUSH_CONSTANT .)
    plus            reduce using rule 77 (CONSTANT -> true SEM_PUSH_CONSTANT .)
    minus           reduce using rule 77 (CONSTANT -> true SEM_PUSH_CONSTANT .)
    gt              reduce using rule 77 (CONSTANT -> true SEM_PUSH_CONSTANT .)
    ge              reduce using rule 77 (CONSTANT -> true SEM_PUSH_CONSTANT .)
    lt              reduce using rule 77 (CONSTANT -> true SEM_PUSH_CONSTANT .)
    le              reduce using rule 77 (CONSTANT -> true SEM_PUSH_CONSTANT .)
    ee              reduce using rule 77 (CONSTANT -> true SEM_PUSH_CONSTANT .)
    ne              reduce using rule 77 (CONSTANT -> true SEM_PUSH_CONSTANT .)
    and             reduce using rule 77 (CONSTANT -> true SEM_PUSH_CONSTANT .)
    or              reduce using rule 77 (CONSTANT -> true SEM_PUSH_CONSTANT .)
    semicolon       reduce using rule 77 (CONSTANT -> true SEM_PUSH_CONSTANT .)
    rp              reduce using rule 77 (CONSTANT -> true SEM_PUSH_CONSTANT .)
    comma           reduce using rule 77 (CONSTANT -> true SEM_PUSH_CONSTANT .)
    rb              reduce using rule 77 (CONSTANT -> true SEM_PUSH_CONSTANT .)


state 151

    (67) FACTOR -> lp SEM_PUSH_PAREN . EXPRESSION rp SEM_POP_PAREN
    (48) EXPRESSION -> . NOT SUPEREXP SEM_RESOLVE_NOT
    (49) EXPRESSION -> . NOT SUPEREXP SEM_RESOLVE_NOT and SEM_PUSH_OPERATOR NOT SUPEREXP SEM_RESOLVE_NOT SEM_RESOLVE_ANDOR
    (50) EXPRESSION -> . NOT SUPEREXP SEM_RESOLVE_NOT or SEM_PUSH_OPERATOR NOT SUPEREXP SEM_RESOLVE_NOT SEM_RESOLVE_ANDOR
    (51) NOT -> . not SEM_PUSH_OPERATOR
    (52) NOT -> . empty
    (80) empty -> .

    not             shift and go to state 89
    lp              reduce using rule 80 (empty -> .)
    plus            reduce using rule 80 (empty -> .)
    minus           reduce using rule 80 (empty -> .)
    id              reduce using rule 80 (empty -> .)
    c_int           reduce using rule 80 (empty -> .)
    c_decimal       reduce using rule 80 (empty -> .)
    c_string        reduce using rule 80 (empty -> .)
    false           reduce using rule 80 (empty -> .)
    true            reduce using rule 80 (empty -> .)

    empty                          shift and go to state 90
    NOT                            shift and go to state 91
    EXPRESSION                     shift and go to state 190

state 152

    (92) SEM_PUSH_PAREN -> empty .

    not             reduce using rule 92 (SEM_PUSH_PAREN -> empty .)
    lp              reduce using rule 92 (SEM_PUSH_PAREN -> empty .)
    plus            reduce using rule 92 (SEM_PUSH_PAREN -> empty .)
    minus           reduce using rule 92 (SEM_PUSH_PAREN -> empty .)
    id              reduce using rule 92 (SEM_PUSH_PAREN -> empty .)
    c_int           reduce using rule 92 (SEM_PUSH_PAREN -> empty .)
    c_decimal       reduce using rule 92 (SEM_PUSH_PAREN -> empty .)
    c_string        reduce using rule 92 (SEM_PUSH_PAREN -> empty .)
    false           reduce using rule 92 (SEM_PUSH_PAREN -> empty .)
    true            reduce using rule 92 (SEM_PUSH_PAREN -> empty .)
    rp              reduce using rule 92 (SEM_PUSH_PAREN -> empty .)


state 153

    (75) CONSTANT -> c_string SEM_PUSH_CONSTANT .

    times           reduce using rule 75 (CONSTANT -> c_string SEM_PUSH_CONSTANT .)
    divide          reduce using rule 75 (CONSTANT -> c_string SEM_PUSH_CONSTANT .)
    plus            reduce using rule 75 (CONSTANT -> c_string SEM_PUSH_CONSTANT .)
    minus           reduce using rule 75 (CONSTANT -> c_string SEM_PUSH_CONSTANT .)
    gt              reduce using rule 75 (CONSTANT -> c_string SEM_PUSH_CONSTANT .)
    ge              reduce using rule 75 (CONSTANT -> c_string SEM_PUSH_CONSTANT .)
    lt              reduce using rule 75 (CONSTANT -> c_string SEM_PUSH_CONSTANT .)
    le              reduce using rule 75 (CONSTANT -> c_string SEM_PUSH_CONSTANT .)
    ee              reduce using rule 75 (CONSTANT -> c_string SEM_PUSH_CONSTANT .)
    ne              reduce using rule 75 (CONSTANT -> c_string SEM_PUSH_CONSTANT .)
    and             reduce using rule 75 (CONSTANT -> c_string SEM_PUSH_CONSTANT .)
    or              reduce using rule 75 (CONSTANT -> c_string SEM_PUSH_CONSTANT .)
    semicolon       reduce using rule 75 (CONSTANT -> c_string SEM_PUSH_CONSTANT .)
    rp              reduce using rule 75 (CONSTANT -> c_string SEM_PUSH_CONSTANT .)
    comma           reduce using rule 75 (CONSTANT -> c_string SEM_PUSH_CONSTANT .)
    rb              reduce using rule 75 (CONSTANT -> c_string SEM_PUSH_CONSTANT .)


state 154

    (73) CONSTANT -> c_int SEM_PUSH_CONSTANT .

    times           reduce using rule 73 (CONSTANT -> c_int SEM_PUSH_CONSTANT .)
    divide          reduce using rule 73 (CONSTANT -> c_int SEM_PUSH_CONSTANT .)
    plus            reduce using rule 73 (CONSTANT -> c_int SEM_PUSH_CONSTANT .)
    minus           reduce using rule 73 (CONSTANT -> c_int SEM_PUSH_CONSTANT .)
    gt              reduce using rule 73 (CONSTANT -> c_int SEM_PUSH_CONSTANT .)
    ge              reduce using rule 73 (CONSTANT -> c_int SEM_PUSH_CONSTANT .)
    lt              reduce using rule 73 (CONSTANT -> c_int SEM_PUSH_CONSTANT .)
    le              reduce using rule 73 (CONSTANT -> c_int SEM_PUSH_CONSTANT .)
    ee              reduce using rule 73 (CONSTANT -> c_int SEM_PUSH_CONSTANT .)
    ne              reduce using rule 73 (CONSTANT -> c_int SEM_PUSH_CONSTANT .)
    and             reduce using rule 73 (CONSTANT -> c_int SEM_PUSH_CONSTANT .)
    or              reduce using rule 73 (CONSTANT -> c_int SEM_PUSH_CONSTANT .)
    semicolon       reduce using rule 73 (CONSTANT -> c_int SEM_PUSH_CONSTANT .)
    rp              reduce using rule 73 (CONSTANT -> c_int SEM_PUSH_CONSTANT .)
    comma           reduce using rule 73 (CONSTANT -> c_int SEM_PUSH_CONSTANT .)
    rb              reduce using rule 73 (CONSTANT -> c_int SEM_PUSH_CONSTANT .)


state 155

    (74) CONSTANT -> c_decimal SEM_PUSH_CONSTANT .

    times           reduce using rule 74 (CONSTANT -> c_decimal SEM_PUSH_CONSTANT .)
    divide          reduce using rule 74 (CONSTANT -> c_decimal SEM_PUSH_CONSTANT .)
    plus            reduce using rule 74 (CONSTANT -> c_decimal SEM_PUSH_CONSTANT .)
    minus           reduce using rule 74 (CONSTANT -> c_decimal SEM_PUSH_CONSTANT .)
    gt              reduce using rule 74 (CONSTANT -> c_decimal SEM_PUSH_CONSTANT .)
    ge              reduce using rule 74 (CONSTANT -> c_decimal SEM_PUSH_CONSTANT .)
    lt              reduce using rule 74 (CONSTANT -> c_decimal SEM_PUSH_CONSTANT .)
    le              reduce using rule 74 (CONSTANT -> c_decimal SEM_PUSH_CONSTANT .)
    ee              reduce using rule 74 (CONSTANT -> c_decimal SEM_PUSH_CONSTANT .)
    ne              reduce using rule 74 (CONSTANT -> c_decimal SEM_PUSH_CONSTANT .)
    and             reduce using rule 74 (CONSTANT -> c_decimal SEM_PUSH_CONSTANT .)
    or              reduce using rule 74 (CONSTANT -> c_decimal SEM_PUSH_CONSTANT .)
    semicolon       reduce using rule 74 (CONSTANT -> c_decimal SEM_PUSH_CONSTANT .)
    rp              reduce using rule 74 (CONSTANT -> c_decimal SEM_PUSH_CONSTANT .)
    comma           reduce using rule 74 (CONSTANT -> c_decimal SEM_PUSH_CONSTANT .)
    rb              reduce using rule 74 (CONSTANT -> c_decimal SEM_PUSH_CONSTANT .)


state 156

    (48) EXPRESSION -> NOT SUPEREXP SEM_RESOLVE_NOT .
    (49) EXPRESSION -> NOT SUPEREXP SEM_RESOLVE_NOT . and SEM_PUSH_OPERATOR NOT SUPEREXP SEM_RESOLVE_NOT SEM_RESOLVE_ANDOR
    (50) EXPRESSION -> NOT SUPEREXP SEM_RESOLVE_NOT . or SEM_PUSH_OPERATOR NOT SUPEREXP SEM_RESOLVE_NOT SEM_RESOLVE_ANDOR

    semicolon       reduce using rule 48 (EXPRESSION -> NOT SUPEREXP SEM_RESOLVE_NOT .)
    rp              reduce using rule 48 (EXPRESSION -> NOT SUPEREXP SEM_RESOLVE_NOT .)
    comma           reduce using rule 48 (EXPRESSION -> NOT SUPEREXP SEM_RESOLVE_NOT .)
    and             shift and go to state 191
    or              shift and go to state 192


state 157

    (99) SEM_RESOLVE_NOT -> empty .

    and             reduce using rule 99 (SEM_RESOLVE_NOT -> empty .)
    or              reduce using rule 99 (SEM_RESOLVE_NOT -> empty .)
    semicolon       reduce using rule 99 (SEM_RESOLVE_NOT -> empty .)
    rp              reduce using rule 99 (SEM_RESOLVE_NOT -> empty .)
    comma           reduce using rule 99 (SEM_RESOLVE_NOT -> empty .)


state 158

    (69) FACTOR -> plus CONSTANT .

    times           reduce using rule 69 (FACTOR -> plus CONSTANT .)
    divide          reduce using rule 69 (FACTOR -> plus CONSTANT .)
    plus            reduce using rule 69 (FACTOR -> plus CONSTANT .)
    minus           reduce using rule 69 (FACTOR -> plus CONSTANT .)
    gt              reduce using rule 69 (FACTOR -> plus CONSTANT .)
    ge              reduce using rule 69 (FACTOR -> plus CONSTANT .)
    lt              reduce using rule 69 (FACTOR -> plus CONSTANT .)
    le              reduce using rule 69 (FACTOR -> plus CONSTANT .)
    ee              reduce using rule 69 (FACTOR -> plus CONSTANT .)
    ne              reduce using rule 69 (FACTOR -> plus CONSTANT .)
    semicolon       reduce using rule 69 (FACTOR -> plus CONSTANT .)
    rp              reduce using rule 69 (FACTOR -> plus CONSTANT .)
    comma           reduce using rule 69 (FACTOR -> plus CONSTANT .)
    and             reduce using rule 69 (FACTOR -> plus CONSTANT .)
    or              reduce using rule 69 (FACTOR -> plus CONSTANT .)
    rb              reduce using rule 69 (FACTOR -> plus CONSTANT .)


state 159

    (64) TERM -> FACTOR SEM_RESOLVE_TIMESDIVIDE .
    (65) TERM -> FACTOR SEM_RESOLVE_TIMESDIVIDE . times SEM_PUSH_OPERATOR TERM
    (66) TERM -> FACTOR SEM_RESOLVE_TIMESDIVIDE . divide SEM_PUSH_OPERATOR TERM

    plus            reduce using rule 64 (TERM -> FACTOR SEM_RESOLVE_TIMESDIVIDE .)
    minus           reduce using rule 64 (TERM -> FACTOR SEM_RESOLVE_TIMESDIVIDE .)
    gt              reduce using rule 64 (TERM -> FACTOR SEM_RESOLVE_TIMESDIVIDE .)
    ge              reduce using rule 64 (TERM -> FACTOR SEM_RESOLVE_TIMESDIVIDE .)
    lt              reduce using rule 64 (TERM -> FACTOR SEM_RESOLVE_TIMESDIVIDE .)
    le              reduce using rule 64 (TERM -> FACTOR SEM_RESOLVE_TIMESDIVIDE .)
    ee              reduce using rule 64 (TERM -> FACTOR SEM_RESOLVE_TIMESDIVIDE .)
    ne              reduce using rule 64 (TERM -> FACTOR SEM_RESOLVE_TIMESDIVIDE .)
    semicolon       reduce using rule 64 (TERM -> FACTOR SEM_RESOLVE_TIMESDIVIDE .)
    rp              reduce using rule 64 (TERM -> FACTOR SEM_RESOLVE_TIMESDIVIDE .)
    comma           reduce using rule 64 (TERM -> FACTOR SEM_RESOLVE_TIMESDIVIDE .)
    and             reduce using rule 64 (TERM -> FACTOR SEM_RESOLVE_TIMESDIVIDE .)
    or              reduce using rule 64 (TERM -> FACTOR SEM_RESOLVE_TIMESDIVIDE .)
    rb              reduce using rule 64 (TERM -> FACTOR SEM_RESOLVE_TIMESDIVIDE .)
    times           shift and go to state 194
    divide          shift and go to state 193


state 160

    (91) SEM_RESOLVE_TIMESDIVIDE -> empty .

    times           reduce using rule 91 (SEM_RESOLVE_TIMESDIVIDE -> empty .)
    divide          reduce using rule 91 (SEM_RESOLVE_TIMESDIVIDE -> empty .)
    plus            reduce using rule 91 (SEM_RESOLVE_TIMESDIVIDE -> empty .)
    minus           reduce using rule 91 (SEM_RESOLVE_TIMESDIVIDE -> empty .)
    gt              reduce using rule 91 (SEM_RESOLVE_TIMESDIVIDE -> empty .)
    ge              reduce using rule 91 (SEM_RESOLVE_TIMESDIVIDE -> empty .)
    lt              reduce using rule 91 (SEM_RESOLVE_TIMESDIVIDE -> empty .)
    le              reduce using rule 91 (SEM_RESOLVE_TIMESDIVIDE -> empty .)
    ee              reduce using rule 91 (SEM_RESOLVE_TIMESDIVIDE -> empty .)
    ne              reduce using rule 91 (SEM_RESOLVE_TIMESDIVIDE -> empty .)
    and             reduce using rule 91 (SEM_RESOLVE_TIMESDIVIDE -> empty .)
    or              reduce using rule 91 (SEM_RESOLVE_TIMESDIVIDE -> empty .)
    semicolon       reduce using rule 91 (SEM_RESOLVE_TIMESDIVIDE -> empty .)
    rp              reduce using rule 91 (SEM_RESOLVE_TIMESDIVIDE -> empty .)
    comma           reduce using rule 91 (SEM_RESOLVE_TIMESDIVIDE -> empty .)
    rb              reduce using rule 91 (SEM_RESOLVE_TIMESDIVIDE -> empty .)


state 161

    (70) FACTOR -> minus CONSTANT .

    times           reduce using rule 70 (FACTOR -> minus CONSTANT .)
    divide          reduce using rule 70 (FACTOR -> minus CONSTANT .)
    plus            reduce using rule 70 (FACTOR -> minus CONSTANT .)
    minus           reduce using rule 70 (FACTOR -> minus CONSTANT .)
    gt              reduce using rule 70 (FACTOR -> minus CONSTANT .)
    ge              reduce using rule 70 (FACTOR -> minus CONSTANT .)
    lt              reduce using rule 70 (FACTOR -> minus CONSTANT .)
    le              reduce using rule 70 (FACTOR -> minus CONSTANT .)
    ee              reduce using rule 70 (FACTOR -> minus CONSTANT .)
    ne              reduce using rule 70 (FACTOR -> minus CONSTANT .)
    semicolon       reduce using rule 70 (FACTOR -> minus CONSTANT .)
    rp              reduce using rule 70 (FACTOR -> minus CONSTANT .)
    comma           reduce using rule 70 (FACTOR -> minus CONSTANT .)
    and             reduce using rule 70 (FACTOR -> minus CONSTANT .)
    or              reduce using rule 70 (FACTOR -> minus CONSTANT .)
    rb              reduce using rule 70 (FACTOR -> minus CONSTANT .)


state 162

    (47) RETURN -> return EXPRESSION SEM_RETURN semicolon .

    id              reduce using rule 47 (RETURN -> return EXPRESSION SEM_RETURN semicolon .)
    readto          reduce using rule 47 (RETURN -> return EXPRESSION SEM_RETURN semicolon .)
    print           reduce using rule 47 (RETURN -> return EXPRESSION SEM_RETURN semicolon .)
    if              reduce using rule 47 (RETURN -> return EXPRESSION SEM_RETURN semicolon .)
    while           reduce using rule 47 (RETURN -> return EXPRESSION SEM_RETURN semicolon .)
    return          reduce using rule 47 (RETURN -> return EXPRESSION SEM_RETURN semicolon .)
    rk              reduce using rule 47 (RETURN -> return EXPRESSION SEM_RETURN semicolon .)


state 163

    (20) FUNCPARAMETERS -> TYPE id SEM_ADD_PARAM comma FUNCPARAMETERS .

    rp              reduce using rule 20 (FUNCPARAMETERS -> TYPE id SEM_ADD_PARAM comma FUNCPARAMETERS .)


state 164

    (16) FUNCTION -> function FUNCTYPE id SEM_ADD_FUNC lp FUNCPARAMETERS rp lk DECLARATIONS SEM_ADD_FUNC_START . STATEMENTS rk SEM_END_FUNC
    (23) STATEMENTS -> . STATEMENT STATEMENTS
    (24) STATEMENTS -> . empty
    (25) STATEMENT -> . ASSIGN
    (26) STATEMENT -> . READ
    (27) STATEMENT -> . PRINT
    (28) STATEMENT -> . FUNCCALL
    (29) STATEMENT -> . CONDITION
    (30) STATEMENT -> . LOOP
    (31) STATEMENT -> . RETURN
    (32) STATEMENT -> . LISTADD
    (33) STATEMENT -> . LISTREMOVE
    (80) empty -> .
    (34) ASSIGN -> . id SEM_PUSH_OPERAND LISTINDEX equal SEM_PUSH_OPERATOR EXPRESSION SEM_ASSIGN semicolon
    (37) READ -> . readto SEM_PUSH_OPERATOR lp id SEM_PUSH_OPERAND SEM_GEN_READ rp semicolon
    (38) PRINT -> . print SEM_PUSH_OPERATOR lp EXPRESSION rp SEM_PRINT semicolon
    (39) FUNCCALL -> . id SEM_VERIFY_FUNC lp SEM_GEN_ERA CALLPARAMETERS rp SEM_VERIFY_NUM_PARAMS semicolon SEM_GEN_GOSUB
    (43) CONDITION -> . if lp EXPRESSION rp SEM_GEN_GOTOF BLOCK ELSEBLOCK SEM_FILL_END
    (46) LOOP -> . while SEM_PUSH_START lp EXPRESSION rp SEM_GEN_GOTOF BLOCK SEM_FILL_LOOP
    (47) RETURN -> . return EXPRESSION SEM_RETURN semicolon
    (78) LISTADD -> . id SEM_PUSH_OPERAND dot add lp EXP rp SEM_ADD_TO_LIST semicolon
    (79) LISTREMOVE -> . id SEM_PUSH_OPERAND LISTINDEX dot remove semicolon SEM_REMOVE_FROM_LIST

    rk              reduce using rule 80 (empty -> .)
    id              shift and go to state 63
    readto          shift and go to state 60
    print           shift and go to state 66
    if              shift and go to state 64
    while           shift and go to state 59
    return          shift and go to state 69

    RETURN                         shift and go to state 62
    FUNCCALL                       shift and go to state 65
    READ                           shift and go to state 58
    PRINT                          shift and go to state 61
    STATEMENTS                     shift and go to state 195
    ASSIGN                         shift and go to state 67
    CONDITION                      shift and go to state 68
    LISTADD                        shift and go to state 70
    STATEMENT                      shift and go to state 71
    empty                          shift and go to state 72
    LISTREMOVE                     shift and go to state 73
    LOOP                           shift and go to state 74

state 165

    (106) SEM_ADD_FUNC_START -> empty .

    id              reduce using rule 106 (SEM_ADD_FUNC_START -> empty .)
    readto          reduce using rule 106 (SEM_ADD_FUNC_START -> empty .)
    print           reduce using rule 106 (SEM_ADD_FUNC_START -> empty .)
    if              reduce using rule 106 (SEM_ADD_FUNC_START -> empty .)
    while           reduce using rule 106 (SEM_ADD_FUNC_START -> empty .)
    return          reduce using rule 106 (SEM_ADD_FUNC_START -> empty .)
    rk              reduce using rule 106 (SEM_ADD_FUNC_START -> empty .)


state 166

    (46) LOOP -> while SEM_PUSH_START lp EXPRESSION rp . SEM_GEN_GOTOF BLOCK SEM_FILL_LOOP
    (100) SEM_GEN_GOTOF -> . empty
    (80) empty -> .

    lk              reduce using rule 80 (empty -> .)

    SEM_GEN_GOTOF                  shift and go to state 196
    empty                          shift and go to state 177

state 167

    (37) READ -> readto SEM_PUSH_OPERATOR lp id SEM_PUSH_OPERAND . SEM_GEN_READ rp semicolon
    (86) SEM_GEN_READ -> . empty
    (80) empty -> .

    rp              reduce using rule 80 (empty -> .)

    SEM_GEN_READ                   shift and go to state 198
    empty                          shift and go to state 197

state 168

    (88) SEM_PUSH_OPERAND -> empty .

    rp              reduce using rule 88 (SEM_PUSH_OPERAND -> empty .)


state 169

    (39) FUNCCALL -> id SEM_VERIFY_FUNC lp SEM_GEN_ERA CALLPARAMETERS . rp SEM_VERIFY_NUM_PARAMS semicolon SEM_GEN_GOSUB

    rp              shift and go to state 199


state 170

    (40) CALLPARAMETERS -> EXPRESSION . SEM_MATCH_PARAM
    (41) CALLPARAMETERS -> EXPRESSION . SEM_MATCH_PARAM comma CALLPARAMETERS
    (109) SEM_MATCH_PARAM -> . empty
    (80) empty -> .

    comma           reduce using rule 80 (empty -> .)
    rp              reduce using rule 80 (empty -> .)

    SEM_MATCH_PARAM                shift and go to state 200
    empty                          shift and go to state 201

state 171

    (42) CALLPARAMETERS -> empty .
    (52) NOT -> empty .

    rp              reduce using rule 42 (CALLPARAMETERS -> empty .)
    lp              reduce using rule 52 (NOT -> empty .)
    plus            reduce using rule 52 (NOT -> empty .)
    minus           reduce using rule 52 (NOT -> empty .)
    id              reduce using rule 52 (NOT -> empty .)
    c_int           reduce using rule 52 (NOT -> empty .)
    c_decimal       reduce using rule 52 (NOT -> empty .)
    c_string        reduce using rule 52 (NOT -> empty .)
    false           reduce using rule 52 (NOT -> empty .)
    true            reduce using rule 52 (NOT -> empty .)


state 172

    (35) LISTINDEX -> lb EXP rb . SEM_LIST_INDEX
    (117) SEM_LIST_INDEX -> . empty
    (80) empty -> .

    equal           reduce using rule 80 (empty -> .)
    dot             reduce using rule 80 (empty -> .)
    times           reduce using rule 80 (empty -> .)
    divide          reduce using rule 80 (empty -> .)
    plus            reduce using rule 80 (empty -> .)
    minus           reduce using rule 80 (empty -> .)
    gt              reduce using rule 80 (empty -> .)
    ge              reduce using rule 80 (empty -> .)
    lt              reduce using rule 80 (empty -> .)
    le              reduce using rule 80 (empty -> .)
    ee              reduce using rule 80 (empty -> .)
    ne              reduce using rule 80 (empty -> .)
    and             reduce using rule 80 (empty -> .)
    or              reduce using rule 80 (empty -> .)
    semicolon       reduce using rule 80 (empty -> .)
    rp              reduce using rule 80 (empty -> .)
    comma           reduce using rule 80 (empty -> .)
    rb              reduce using rule 80 (empty -> .)

    SEM_LIST_INDEX                 shift and go to state 203
    empty                          shift and go to state 202

state 173

    (79) LISTREMOVE -> id SEM_PUSH_OPERAND LISTINDEX dot remove . semicolon SEM_REMOVE_FROM_LIST

    semicolon       shift and go to state 204


state 174

    (34) ASSIGN -> id SEM_PUSH_OPERAND LISTINDEX equal SEM_PUSH_OPERATOR . EXPRESSION SEM_ASSIGN semicolon
    (48) EXPRESSION -> . NOT SUPEREXP SEM_RESOLVE_NOT
    (49) EXPRESSION -> . NOT SUPEREXP SEM_RESOLVE_NOT and SEM_PUSH_OPERATOR NOT SUPEREXP SEM_RESOLVE_NOT SEM_RESOLVE_ANDOR
    (50) EXPRESSION -> . NOT SUPEREXP SEM_RESOLVE_NOT or SEM_PUSH_OPERATOR NOT SUPEREXP SEM_RESOLVE_NOT SEM_RESOLVE_ANDOR
    (51) NOT -> . not SEM_PUSH_OPERATOR
    (52) NOT -> . empty
    (80) empty -> .

    not             shift and go to state 89
    lp              reduce using rule 80 (empty -> .)
    plus            reduce using rule 80 (empty -> .)
    minus           reduce using rule 80 (empty -> .)
    id              reduce using rule 80 (empty -> .)
    c_int           reduce using rule 80 (empty -> .)
    c_decimal       reduce using rule 80 (empty -> .)
    c_string        reduce using rule 80 (empty -> .)
    false           reduce using rule 80 (empty -> .)
    true            reduce using rule 80 (empty -> .)

    empty                          shift and go to state 90
    NOT                            shift and go to state 91
    EXPRESSION                     shift and go to state 205

state 175

    (78) LISTADD -> id SEM_PUSH_OPERAND dot add lp . EXP rp SEM_ADD_TO_LIST semicolon
    (61) EXP -> . TERM SEM_RESOLVE_PLUSMINUS
    (62) EXP -> . TERM SEM_RESOLVE_PLUSMINUS plus SEM_PUSH_OPERATOR EXP
    (63) EXP -> . TERM SEM_RESOLVE_PLUSMINUS minus SEM_PUSH_OPERATOR EXP
    (64) TERM -> . FACTOR SEM_RESOLVE_TIMESDIVIDE
    (65) TERM -> . FACTOR SEM_RESOLVE_TIMESDIVIDE times SEM_PUSH_OPERATOR TERM
    (66) TERM -> . FACTOR SEM_RESOLVE_TIMESDIVIDE divide SEM_PUSH_OPERATOR TERM
    (67) FACTOR -> . lp SEM_PUSH_PAREN EXPRESSION rp SEM_POP_PAREN
    (68) FACTOR -> . CONSTANT
    (69) FACTOR -> . plus CONSTANT
    (70) FACTOR -> . minus CONSTANT
    (71) CONSTANT -> . id SEM_PUSH_OPERAND LISTINDEX
    (72) CONSTANT -> . id SEM_VERIFY_FUNC lp SEM_PUSH_PAREN SEM_GEN_ERA CALLPARAMETERS rp SEM_POP_PAREN SEM_VERIFY_NUM_PARAMS SEM_GEN_GOSUB_ASSIGN
    (73) CONSTANT -> . c_int SEM_PUSH_CONSTANT
    (74) CONSTANT -> . c_decimal SEM_PUSH_CONSTANT
    (75) CONSTANT -> . c_string SEM_PUSH_CONSTANT
    (76) CONSTANT -> . false SEM_PUSH_CONSTANT
    (77) CONSTANT -> . true SEM_PUSH_CONSTANT

    lp              shift and go to state 115
    plus            shift and go to state 120
    minus           shift and go to state 122
    id              shift and go to state 112
    c_int           shift and go to state 117
    c_decimal       shift and go to state 118
    c_string        shift and go to state 116
    false           shift and go to state 111
    true            shift and go to state 114

    TERM                           shift and go to state 113
    CONSTANT                       shift and go to state 109
    EXP                            shift and go to state 206
    FACTOR                         shift and go to state 121

state 176

    (43) CONDITION -> if lp EXPRESSION rp SEM_GEN_GOTOF . BLOCK ELSEBLOCK SEM_FILL_END
    (22) BLOCK -> . lk STATEMENTS rk

    lk              shift and go to state 50

    BLOCK                          shift and go to state 207

state 177

    (100) SEM_GEN_GOTOF -> empty .

    lk              reduce using rule 100 (SEM_GEN_GOTOF -> empty .)


state 178

    (38) PRINT -> print SEM_PUSH_OPERATOR lp EXPRESSION rp . SEM_PRINT semicolon
    (96) SEM_PRINT -> . empty
    (80) empty -> .

    semicolon       reduce using rule 80 (empty -> .)

    SEM_PRINT                      shift and go to state 208
    empty                          shift and go to state 209

state 179

    (55) RELOP -> gt SEM_PUSH_OPERATOR .

    lp              reduce using rule 55 (RELOP -> gt SEM_PUSH_OPERATOR .)
    plus            reduce using rule 55 (RELOP -> gt SEM_PUSH_OPERATOR .)
    minus           reduce using rule 55 (RELOP -> gt SEM_PUSH_OPERATOR .)
    id              reduce using rule 55 (RELOP -> gt SEM_PUSH_OPERATOR .)
    c_int           reduce using rule 55 (RELOP -> gt SEM_PUSH_OPERATOR .)
    c_decimal       reduce using rule 55 (RELOP -> gt SEM_PUSH_OPERATOR .)
    c_string        reduce using rule 55 (RELOP -> gt SEM_PUSH_OPERATOR .)
    false           reduce using rule 55 (RELOP -> gt SEM_PUSH_OPERATOR .)
    true            reduce using rule 55 (RELOP -> gt SEM_PUSH_OPERATOR .)


state 180

    (54) SUPEREXP -> EXP RELOP EXP . SEM_RESOLVE_RELOP
    (97) SEM_RESOLVE_RELOP -> . empty
    (80) empty -> .

    and             reduce using rule 80 (empty -> .)
    or              reduce using rule 80 (empty -> .)
    semicolon       reduce using rule 80 (empty -> .)
    rp              reduce using rule 80 (empty -> .)
    comma           reduce using rule 80 (empty -> .)

    SEM_RESOLVE_RELOP              shift and go to state 210
    empty                          shift and go to state 211

state 181

    (59) RELOP -> ee SEM_PUSH_OPERATOR .

    lp              reduce using rule 59 (RELOP -> ee SEM_PUSH_OPERATOR .)
    plus            reduce using rule 59 (RELOP -> ee SEM_PUSH_OPERATOR .)
    minus           reduce using rule 59 (RELOP -> ee SEM_PUSH_OPERATOR .)
    id              reduce using rule 59 (RELOP -> ee SEM_PUSH_OPERATOR .)
    c_int           reduce using rule 59 (RELOP -> ee SEM_PUSH_OPERATOR .)
    c_decimal       reduce using rule 59 (RELOP -> ee SEM_PUSH_OPERATOR .)
    c_string        reduce using rule 59 (RELOP -> ee SEM_PUSH_OPERATOR .)
    false           reduce using rule 59 (RELOP -> ee SEM_PUSH_OPERATOR .)
    true            reduce using rule 59 (RELOP -> ee SEM_PUSH_OPERATOR .)


state 182

    (57) RELOP -> lt SEM_PUSH_OPERATOR .

    lp              reduce using rule 57 (RELOP -> lt SEM_PUSH_OPERATOR .)
    plus            reduce using rule 57 (RELOP -> lt SEM_PUSH_OPERATOR .)
    minus           reduce using rule 57 (RELOP -> lt SEM_PUSH_OPERATOR .)
    id              reduce using rule 57 (RELOP -> lt SEM_PUSH_OPERATOR .)
    c_int           reduce using rule 57 (RELOP -> lt SEM_PUSH_OPERATOR .)
    c_decimal       reduce using rule 57 (RELOP -> lt SEM_PUSH_OPERATOR .)
    c_string        reduce using rule 57 (RELOP -> lt SEM_PUSH_OPERATOR .)
    false           reduce using rule 57 (RELOP -> lt SEM_PUSH_OPERATOR .)
    true            reduce using rule 57 (RELOP -> lt SEM_PUSH_OPERATOR .)


state 183

    (60) RELOP -> ne SEM_PUSH_OPERATOR .

    lp              reduce using rule 60 (RELOP -> ne SEM_PUSH_OPERATOR .)
    plus            reduce using rule 60 (RELOP -> ne SEM_PUSH_OPERATOR .)
    minus           reduce using rule 60 (RELOP -> ne SEM_PUSH_OPERATOR .)
    id              reduce using rule 60 (RELOP -> ne SEM_PUSH_OPERATOR .)
    c_int           reduce using rule 60 (RELOP -> ne SEM_PUSH_OPERATOR .)
    c_decimal       reduce using rule 60 (RELOP -> ne SEM_PUSH_OPERATOR .)
    c_string        reduce using rule 60 (RELOP -> ne SEM_PUSH_OPERATOR .)
    false           reduce using rule 60 (RELOP -> ne SEM_PUSH_OPERATOR .)
    true            reduce using rule 60 (RELOP -> ne SEM_PUSH_OPERATOR .)


state 184

    (56) RELOP -> ge SEM_PUSH_OPERATOR .

    lp              reduce using rule 56 (RELOP -> ge SEM_PUSH_OPERATOR .)
    plus            reduce using rule 56 (RELOP -> ge SEM_PUSH_OPERATOR .)
    minus           reduce using rule 56 (RELOP -> ge SEM_PUSH_OPERATOR .)
    id              reduce using rule 56 (RELOP -> ge SEM_PUSH_OPERATOR .)
    c_int           reduce using rule 56 (RELOP -> ge SEM_PUSH_OPERATOR .)
    c_decimal       reduce using rule 56 (RELOP -> ge SEM_PUSH_OPERATOR .)
    c_string        reduce using rule 56 (RELOP -> ge SEM_PUSH_OPERATOR .)
    false           reduce using rule 56 (RELOP -> ge SEM_PUSH_OPERATOR .)
    true            reduce using rule 56 (RELOP -> ge SEM_PUSH_OPERATOR .)


state 185

    (58) RELOP -> le SEM_PUSH_OPERATOR .

    lp              reduce using rule 58 (RELOP -> le SEM_PUSH_OPERATOR .)
    plus            reduce using rule 58 (RELOP -> le SEM_PUSH_OPERATOR .)
    minus           reduce using rule 58 (RELOP -> le SEM_PUSH_OPERATOR .)
    id              reduce using rule 58 (RELOP -> le SEM_PUSH_OPERATOR .)
    c_int           reduce using rule 58 (RELOP -> le SEM_PUSH_OPERATOR .)
    c_decimal       reduce using rule 58 (RELOP -> le SEM_PUSH_OPERATOR .)
    c_string        reduce using rule 58 (RELOP -> le SEM_PUSH_OPERATOR .)
    false           reduce using rule 58 (RELOP -> le SEM_PUSH_OPERATOR .)
    true            reduce using rule 58 (RELOP -> le SEM_PUSH_OPERATOR .)


state 186

    (71) CONSTANT -> id SEM_PUSH_OPERAND LISTINDEX .

    times           reduce using rule 71 (CONSTANT -> id SEM_PUSH_OPERAND LISTINDEX .)
    divide          reduce using rule 71 (CONSTANT -> id SEM_PUSH_OPERAND LISTINDEX .)
    plus            reduce using rule 71 (CONSTANT -> id SEM_PUSH_OPERAND LISTINDEX .)
    minus           reduce using rule 71 (CONSTANT -> id SEM_PUSH_OPERAND LISTINDEX .)
    gt              reduce using rule 71 (CONSTANT -> id SEM_PUSH_OPERAND LISTINDEX .)
    ge              reduce using rule 71 (CONSTANT -> id SEM_PUSH_OPERAND LISTINDEX .)
    lt              reduce using rule 71 (CONSTANT -> id SEM_PUSH_OPERAND LISTINDEX .)
    le              reduce using rule 71 (CONSTANT -> id SEM_PUSH_OPERAND LISTINDEX .)
    ee              reduce using rule 71 (CONSTANT -> id SEM_PUSH_OPERAND LISTINDEX .)
    ne              reduce using rule 71 (CONSTANT -> id SEM_PUSH_OPERAND LISTINDEX .)
    and             reduce using rule 71 (CONSTANT -> id SEM_PUSH_OPERAND LISTINDEX .)
    or              reduce using rule 71 (CONSTANT -> id SEM_PUSH_OPERAND LISTINDEX .)
    semicolon       reduce using rule 71 (CONSTANT -> id SEM_PUSH_OPERAND LISTINDEX .)
    rp              reduce using rule 71 (CONSTANT -> id SEM_PUSH_OPERAND LISTINDEX .)
    comma           reduce using rule 71 (CONSTANT -> id SEM_PUSH_OPERAND LISTINDEX .)
    rb              reduce using rule 71 (CONSTANT -> id SEM_PUSH_OPERAND LISTINDEX .)


state 187

    (72) CONSTANT -> id SEM_VERIFY_FUNC lp . SEM_PUSH_PAREN SEM_GEN_ERA CALLPARAMETERS rp SEM_POP_PAREN SEM_VERIFY_NUM_PARAMS SEM_GEN_GOSUB_ASSIGN
    (92) SEM_PUSH_PAREN -> . empty
    (80) empty -> .

    not             reduce using rule 80 (empty -> .)
    rp              reduce using rule 80 (empty -> .)
    lp              reduce using rule 80 (empty -> .)
    plus            reduce using rule 80 (empty -> .)
    minus           reduce using rule 80 (empty -> .)
    id              reduce using rule 80 (empty -> .)
    c_int           reduce using rule 80 (empty -> .)
    c_decimal       reduce using rule 80 (empty -> .)
    c_string        reduce using rule 80 (empty -> .)
    false           reduce using rule 80 (empty -> .)
    true            reduce using rule 80 (empty -> .)

    SEM_PUSH_PAREN                 shift and go to state 212
    empty                          shift and go to state 152

state 188

    (62) EXP -> TERM SEM_RESOLVE_PLUSMINUS plus . SEM_PUSH_OPERATOR EXP
    (89) SEM_PUSH_OPERATOR -> . empty
    (80) empty -> .

    lp              reduce using rule 80 (empty -> .)
    plus            reduce using rule 80 (empty -> .)
    minus           reduce using rule 80 (empty -> .)
    id              reduce using rule 80 (empty -> .)
    c_int           reduce using rule 80 (empty -> .)
    c_decimal       reduce using rule 80 (empty -> .)
    c_string        reduce using rule 80 (empty -> .)
    false           reduce using rule 80 (empty -> .)
    true            reduce using rule 80 (empty -> .)

    empty                          shift and go to state 82
    SEM_PUSH_OPERATOR              shift and go to state 213

state 189

    (63) EXP -> TERM SEM_RESOLVE_PLUSMINUS minus . SEM_PUSH_OPERATOR EXP
    (89) SEM_PUSH_OPERATOR -> . empty
    (80) empty -> .

    lp              reduce using rule 80 (empty -> .)
    plus            reduce using rule 80 (empty -> .)
    minus           reduce using rule 80 (empty -> .)
    id              reduce using rule 80 (empty -> .)
    c_int           reduce using rule 80 (empty -> .)
    c_decimal       reduce using rule 80 (empty -> .)
    c_string        reduce using rule 80 (empty -> .)
    false           reduce using rule 80 (empty -> .)
    true            reduce using rule 80 (empty -> .)

    empty                          shift and go to state 82
    SEM_PUSH_OPERATOR              shift and go to state 214

state 190

    (67) FACTOR -> lp SEM_PUSH_PAREN EXPRESSION . rp SEM_POP_PAREN

    rp              shift and go to state 215


state 191

    (49) EXPRESSION -> NOT SUPEREXP SEM_RESOLVE_NOT and . SEM_PUSH_OPERATOR NOT SUPEREXP SEM_RESOLVE_NOT SEM_RESOLVE_ANDOR
    (89) SEM_PUSH_OPERATOR -> . empty
    (80) empty -> .

    not             reduce using rule 80 (empty -> .)
    lp              reduce using rule 80 (empty -> .)
    plus            reduce using rule 80 (empty -> .)
    minus           reduce using rule 80 (empty -> .)
    id              reduce using rule 80 (empty -> .)
    c_int           reduce using rule 80 (empty -> .)
    c_decimal       reduce using rule 80 (empty -> .)
    c_string        reduce using rule 80 (empty -> .)
    false           reduce using rule 80 (empty -> .)
    true            reduce using rule 80 (empty -> .)

    SEM_PUSH_OPERATOR              shift and go to state 216
    empty                          shift and go to state 82

state 192

    (50) EXPRESSION -> NOT SUPEREXP SEM_RESOLVE_NOT or . SEM_PUSH_OPERATOR NOT SUPEREXP SEM_RESOLVE_NOT SEM_RESOLVE_ANDOR
    (89) SEM_PUSH_OPERATOR -> . empty
    (80) empty -> .

    not             reduce using rule 80 (empty -> .)
    lp              reduce using rule 80 (empty -> .)
    plus            reduce using rule 80 (empty -> .)
    minus           reduce using rule 80 (empty -> .)
    id              reduce using rule 80 (empty -> .)
    c_int           reduce using rule 80 (empty -> .)
    c_decimal       reduce using rule 80 (empty -> .)
    c_string        reduce using rule 80 (empty -> .)
    false           reduce using rule 80 (empty -> .)
    true            reduce using rule 80 (empty -> .)

    SEM_PUSH_OPERATOR              shift and go to state 217
    empty                          shift and go to state 82

state 193

    (66) TERM -> FACTOR SEM_RESOLVE_TIMESDIVIDE divide . SEM_PUSH_OPERATOR TERM
    (89) SEM_PUSH_OPERATOR -> . empty
    (80) empty -> .

    lp              reduce using rule 80 (empty -> .)
    plus            reduce using rule 80 (empty -> .)
    minus           reduce using rule 80 (empty -> .)
    id              reduce using rule 80 (empty -> .)
    c_int           reduce using rule 80 (empty -> .)
    c_decimal       reduce using rule 80 (empty -> .)
    c_string        reduce using rule 80 (empty -> .)
    false           reduce using rule 80 (empty -> .)
    true            reduce using rule 80 (empty -> .)

    empty                          shift and go to state 82
    SEM_PUSH_OPERATOR              shift and go to state 218

state 194

    (65) TERM -> FACTOR SEM_RESOLVE_TIMESDIVIDE times . SEM_PUSH_OPERATOR TERM
    (89) SEM_PUSH_OPERATOR -> . empty
    (80) empty -> .

    lp              reduce using rule 80 (empty -> .)
    plus            reduce using rule 80 (empty -> .)
    minus           reduce using rule 80 (empty -> .)
    id              reduce using rule 80 (empty -> .)
    c_int           reduce using rule 80 (empty -> .)
    c_decimal       reduce using rule 80 (empty -> .)
    c_string        reduce using rule 80 (empty -> .)
    false           reduce using rule 80 (empty -> .)
    true            reduce using rule 80 (empty -> .)

    empty                          shift and go to state 82
    SEM_PUSH_OPERATOR              shift and go to state 219

state 195

    (16) FUNCTION -> function FUNCTYPE id SEM_ADD_FUNC lp FUNCPARAMETERS rp lk DECLARATIONS SEM_ADD_FUNC_START STATEMENTS . rk SEM_END_FUNC

    rk              shift and go to state 220


state 196

    (46) LOOP -> while SEM_PUSH_START lp EXPRESSION rp SEM_GEN_GOTOF . BLOCK SEM_FILL_LOOP
    (22) BLOCK -> . lk STATEMENTS rk

    lk              shift and go to state 50

    BLOCK                          shift and go to state 221

state 197

    (86) SEM_GEN_READ -> empty .

    rp              reduce using rule 86 (SEM_GEN_READ -> empty .)


state 198

    (37) READ -> readto SEM_PUSH_OPERATOR lp id SEM_PUSH_OPERAND SEM_GEN_READ . rp semicolon

    rp              shift and go to state 222


state 199

    (39) FUNCCALL -> id SEM_VERIFY_FUNC lp SEM_GEN_ERA CALLPARAMETERS rp . SEM_VERIFY_NUM_PARAMS semicolon SEM_GEN_GOSUB
    (110) SEM_VERIFY_NUM_PARAMS -> . empty
    (80) empty -> .

    semicolon       reduce using rule 80 (empty -> .)

    SEM_VERIFY_NUM_PARAMS          shift and go to state 223
    empty                          shift and go to state 224

state 200

    (40) CALLPARAMETERS -> EXPRESSION SEM_MATCH_PARAM .
    (41) CALLPARAMETERS -> EXPRESSION SEM_MATCH_PARAM . comma CALLPARAMETERS

    rp              reduce using rule 40 (CALLPARAMETERS -> EXPRESSION SEM_MATCH_PARAM .)
    comma           shift and go to state 225


state 201

    (109) SEM_MATCH_PARAM -> empty .

    comma           reduce using rule 109 (SEM_MATCH_PARAM -> empty .)
    rp              reduce using rule 109 (SEM_MATCH_PARAM -> empty .)


state 202

    (117) SEM_LIST_INDEX -> empty .

    equal           reduce using rule 117 (SEM_LIST_INDEX -> empty .)
    dot             reduce using rule 117 (SEM_LIST_INDEX -> empty .)
    times           reduce using rule 117 (SEM_LIST_INDEX -> empty .)
    divide          reduce using rule 117 (SEM_LIST_INDEX -> empty .)
    plus            reduce using rule 117 (SEM_LIST_INDEX -> empty .)
    minus           reduce using rule 117 (SEM_LIST_INDEX -> empty .)
    gt              reduce using rule 117 (SEM_LIST_INDEX -> empty .)
    ge              reduce using rule 117 (SEM_LIST_INDEX -> empty .)
    lt              reduce using rule 117 (SEM_LIST_INDEX -> empty .)
    le              reduce using rule 117 (SEM_LIST_INDEX -> empty .)
    ee              reduce using rule 117 (SEM_LIST_INDEX -> empty .)
    ne              reduce using rule 117 (SEM_LIST_INDEX -> empty .)
    and             reduce using rule 117 (SEM_LIST_INDEX -> empty .)
    or              reduce using rule 117 (SEM_LIST_INDEX -> empty .)
    semicolon       reduce using rule 117 (SEM_LIST_INDEX -> empty .)
    rp              reduce using rule 117 (SEM_LIST_INDEX -> empty .)
    comma           reduce using rule 117 (SEM_LIST_INDEX -> empty .)
    rb              reduce using rule 117 (SEM_LIST_INDEX -> empty .)


state 203

    (35) LISTINDEX -> lb EXP rb SEM_LIST_INDEX .

    equal           reduce using rule 35 (LISTINDEX -> lb EXP rb SEM_LIST_INDEX .)
    dot             reduce using rule 35 (LISTINDEX -> lb EXP rb SEM_LIST_INDEX .)
    times           reduce using rule 35 (LISTINDEX -> lb EXP rb SEM_LIST_INDEX .)
    divide          reduce using rule 35 (LISTINDEX -> lb EXP rb SEM_LIST_INDEX .)
    plus            reduce using rule 35 (LISTINDEX -> lb EXP rb SEM_LIST_INDEX .)
    minus           reduce using rule 35 (LISTINDEX -> lb EXP rb SEM_LIST_INDEX .)
    gt              reduce using rule 35 (LISTINDEX -> lb EXP rb SEM_LIST_INDEX .)
    ge              reduce using rule 35 (LISTINDEX -> lb EXP rb SEM_LIST_INDEX .)
    lt              reduce using rule 35 (LISTINDEX -> lb EXP rb SEM_LIST_INDEX .)
    le              reduce using rule 35 (LISTINDEX -> lb EXP rb SEM_LIST_INDEX .)
    ee              reduce using rule 35 (LISTINDEX -> lb EXP rb SEM_LIST_INDEX .)
    ne              reduce using rule 35 (LISTINDEX -> lb EXP rb SEM_LIST_INDEX .)
    and             reduce using rule 35 (LISTINDEX -> lb EXP rb SEM_LIST_INDEX .)
    or              reduce using rule 35 (LISTINDEX -> lb EXP rb SEM_LIST_INDEX .)
    semicolon       reduce using rule 35 (LISTINDEX -> lb EXP rb SEM_LIST_INDEX .)
    rp              reduce using rule 35 (LISTINDEX -> lb EXP rb SEM_LIST_INDEX .)
    comma           reduce using rule 35 (LISTINDEX -> lb EXP rb SEM_LIST_INDEX .)
    rb              reduce using rule 35 (LISTINDEX -> lb EXP rb SEM_LIST_INDEX .)


state 204

    (79) LISTREMOVE -> id SEM_PUSH_OPERAND LISTINDEX dot remove semicolon . SEM_REMOVE_FROM_LIST
    (119) SEM_REMOVE_FROM_LIST -> . empty
    (80) empty -> .

    id              reduce using rule 80 (empty -> .)
    readto          reduce using rule 80 (empty -> .)
    print           reduce using rule 80 (empty -> .)
    if              reduce using rule 80 (empty -> .)
    while           reduce using rule 80 (empty -> .)
    return          reduce using rule 80 (empty -> .)
    rk              reduce using rule 80 (empty -> .)

    empty                          shift and go to state 227
    SEM_REMOVE_FROM_LIST           shift and go to state 226

state 205

    (34) ASSIGN -> id SEM_PUSH_OPERAND LISTINDEX equal SEM_PUSH_OPERATOR EXPRESSION . SEM_ASSIGN semicolon
    (94) SEM_ASSIGN -> . empty
    (80) empty -> .

    semicolon       reduce using rule 80 (empty -> .)

    empty                          shift and go to state 228
    SEM_ASSIGN                     shift and go to state 229

state 206

    (78) LISTADD -> id SEM_PUSH_OPERAND dot add lp EXP . rp SEM_ADD_TO_LIST semicolon

    rp              shift and go to state 230


state 207

    (43) CONDITION -> if lp EXPRESSION rp SEM_GEN_GOTOF BLOCK . ELSEBLOCK SEM_FILL_END
    (44) ELSEBLOCK -> . else SEM_GENANDFILL_GOTO BLOCK
    (45) ELSEBLOCK -> . empty
    (80) empty -> .

    else            shift and go to state 233
    id              reduce using rule 80 (empty -> .)
    readto          reduce using rule 80 (empty -> .)
    print           reduce using rule 80 (empty -> .)
    if              reduce using rule 80 (empty -> .)
    while           reduce using rule 80 (empty -> .)
    return          reduce using rule 80 (empty -> .)
    rk              reduce using rule 80 (empty -> .)

    ELSEBLOCK                      shift and go to state 231
    empty                          shift and go to state 232

state 208

    (38) PRINT -> print SEM_PUSH_OPERATOR lp EXPRESSION rp SEM_PRINT . semicolon

    semicolon       shift and go to state 234


state 209

    (96) SEM_PRINT -> empty .

    semicolon       reduce using rule 96 (SEM_PRINT -> empty .)


state 210

    (54) SUPEREXP -> EXP RELOP EXP SEM_RESOLVE_RELOP .

    semicolon       reduce using rule 54 (SUPEREXP -> EXP RELOP EXP SEM_RESOLVE_RELOP .)
    rp              reduce using rule 54 (SUPEREXP -> EXP RELOP EXP SEM_RESOLVE_RELOP .)
    comma           reduce using rule 54 (SUPEREXP -> EXP RELOP EXP SEM_RESOLVE_RELOP .)
    and             reduce using rule 54 (SUPEREXP -> EXP RELOP EXP SEM_RESOLVE_RELOP .)
    or              reduce using rule 54 (SUPEREXP -> EXP RELOP EXP SEM_RESOLVE_RELOP .)


state 211

    (97) SEM_RESOLVE_RELOP -> empty .

    and             reduce using rule 97 (SEM_RESOLVE_RELOP -> empty .)
    or              reduce using rule 97 (SEM_RESOLVE_RELOP -> empty .)
    semicolon       reduce using rule 97 (SEM_RESOLVE_RELOP -> empty .)
    rp              reduce using rule 97 (SEM_RESOLVE_RELOP -> empty .)
    comma           reduce using rule 97 (SEM_RESOLVE_RELOP -> empty .)


state 212

    (72) CONSTANT -> id SEM_VERIFY_FUNC lp SEM_PUSH_PAREN . SEM_GEN_ERA CALLPARAMETERS rp SEM_POP_PAREN SEM_VERIFY_NUM_PARAMS SEM_GEN_GOSUB_ASSIGN
    (108) SEM_GEN_ERA -> . empty
    (80) empty -> .

    not             reduce using rule 80 (empty -> .)
    rp              reduce using rule 80 (empty -> .)
    lp              reduce using rule 80 (empty -> .)
    plus            reduce using rule 80 (empty -> .)
    minus           reduce using rule 80 (empty -> .)
    id              reduce using rule 80 (empty -> .)
    c_int           reduce using rule 80 (empty -> .)
    c_decimal       reduce using rule 80 (empty -> .)
    c_string        reduce using rule 80 (empty -> .)
    false           reduce using rule 80 (empty -> .)
    true            reduce using rule 80 (empty -> .)

    SEM_GEN_ERA                    shift and go to state 235
    empty                          shift and go to state 130

state 213

    (62) EXP -> TERM SEM_RESOLVE_PLUSMINUS plus SEM_PUSH_OPERATOR . EXP
    (61) EXP -> . TERM SEM_RESOLVE_PLUSMINUS
    (62) EXP -> . TERM SEM_RESOLVE_PLUSMINUS plus SEM_PUSH_OPERATOR EXP
    (63) EXP -> . TERM SEM_RESOLVE_PLUSMINUS minus SEM_PUSH_OPERATOR EXP
    (64) TERM -> . FACTOR SEM_RESOLVE_TIMESDIVIDE
    (65) TERM -> . FACTOR SEM_RESOLVE_TIMESDIVIDE times SEM_PUSH_OPERATOR TERM
    (66) TERM -> . FACTOR SEM_RESOLVE_TIMESDIVIDE divide SEM_PUSH_OPERATOR TERM
    (67) FACTOR -> . lp SEM_PUSH_PAREN EXPRESSION rp SEM_POP_PAREN
    (68) FACTOR -> . CONSTANT
    (69) FACTOR -> . plus CONSTANT
    (70) FACTOR -> . minus CONSTANT
    (71) CONSTANT -> . id SEM_PUSH_OPERAND LISTINDEX
    (72) CONSTANT -> . id SEM_VERIFY_FUNC lp SEM_PUSH_PAREN SEM_GEN_ERA CALLPARAMETERS rp SEM_POP_PAREN SEM_VERIFY_NUM_PARAMS SEM_GEN_GOSUB_ASSIGN
    (73) CONSTANT -> . c_int SEM_PUSH_CONSTANT
    (74) CONSTANT -> . c_decimal SEM_PUSH_CONSTANT
    (75) CONSTANT -> . c_string SEM_PUSH_CONSTANT
    (76) CONSTANT -> . false SEM_PUSH_CONSTANT
    (77) CONSTANT -> . true SEM_PUSH_CONSTANT

    lp              shift and go to state 115
    plus            shift and go to state 120
    minus           shift and go to state 122
    id              shift and go to state 112
    c_int           shift and go to state 117
    c_decimal       shift and go to state 118
    c_string        shift and go to state 116
    false           shift and go to state 111
    true            shift and go to state 114

    TERM                           shift and go to state 113
    CONSTANT                       shift and go to state 109
    EXP                            shift and go to state 236
    FACTOR                         shift and go to state 121

state 214

    (63) EXP -> TERM SEM_RESOLVE_PLUSMINUS minus SEM_PUSH_OPERATOR . EXP
    (61) EXP -> . TERM SEM_RESOLVE_PLUSMINUS
    (62) EXP -> . TERM SEM_RESOLVE_PLUSMINUS plus SEM_PUSH_OPERATOR EXP
    (63) EXP -> . TERM SEM_RESOLVE_PLUSMINUS minus SEM_PUSH_OPERATOR EXP
    (64) TERM -> . FACTOR SEM_RESOLVE_TIMESDIVIDE
    (65) TERM -> . FACTOR SEM_RESOLVE_TIMESDIVIDE times SEM_PUSH_OPERATOR TERM
    (66) TERM -> . FACTOR SEM_RESOLVE_TIMESDIVIDE divide SEM_PUSH_OPERATOR TERM
    (67) FACTOR -> . lp SEM_PUSH_PAREN EXPRESSION rp SEM_POP_PAREN
    (68) FACTOR -> . CONSTANT
    (69) FACTOR -> . plus CONSTANT
    (70) FACTOR -> . minus CONSTANT
    (71) CONSTANT -> . id SEM_PUSH_OPERAND LISTINDEX
    (72) CONSTANT -> . id SEM_VERIFY_FUNC lp SEM_PUSH_PAREN SEM_GEN_ERA CALLPARAMETERS rp SEM_POP_PAREN SEM_VERIFY_NUM_PARAMS SEM_GEN_GOSUB_ASSIGN
    (73) CONSTANT -> . c_int SEM_PUSH_CONSTANT
    (74) CONSTANT -> . c_decimal SEM_PUSH_CONSTANT
    (75) CONSTANT -> . c_string SEM_PUSH_CONSTANT
    (76) CONSTANT -> . false SEM_PUSH_CONSTANT
    (77) CONSTANT -> . true SEM_PUSH_CONSTANT

    lp              shift and go to state 115
    plus            shift and go to state 120
    minus           shift and go to state 122
    id              shift and go to state 112
    c_int           shift and go to state 117
    c_decimal       shift and go to state 118
    c_string        shift and go to state 116
    false           shift and go to state 111
    true            shift and go to state 114

    TERM                           shift and go to state 113
    CONSTANT                       shift and go to state 109
    EXP                            shift and go to state 237
    FACTOR                         shift and go to state 121

state 215

    (67) FACTOR -> lp SEM_PUSH_PAREN EXPRESSION rp . SEM_POP_PAREN
    (93) SEM_POP_PAREN -> . empty
    (80) empty -> .

    times           reduce using rule 80 (empty -> .)
    divide          reduce using rule 80 (empty -> .)
    plus            reduce using rule 80 (empty -> .)
    minus           reduce using rule 80 (empty -> .)
    gt              reduce using rule 80 (empty -> .)
    ge              reduce using rule 80 (empty -> .)
    lt              reduce using rule 80 (empty -> .)
    le              reduce using rule 80 (empty -> .)
    ee              reduce using rule 80 (empty -> .)
    ne              reduce using rule 80 (empty -> .)
    and             reduce using rule 80 (empty -> .)
    or              reduce using rule 80 (empty -> .)
    semicolon       reduce using rule 80 (empty -> .)
    rp              reduce using rule 80 (empty -> .)
    comma           reduce using rule 80 (empty -> .)
    rb              reduce using rule 80 (empty -> .)

    SEM_POP_PAREN                  shift and go to state 238
    empty                          shift and go to state 239

state 216

    (49) EXPRESSION -> NOT SUPEREXP SEM_RESOLVE_NOT and SEM_PUSH_OPERATOR . NOT SUPEREXP SEM_RESOLVE_NOT SEM_RESOLVE_ANDOR
    (51) NOT -> . not SEM_PUSH_OPERATOR
    (52) NOT -> . empty
    (80) empty -> .

    not             shift and go to state 89
    lp              reduce using rule 80 (empty -> .)
    plus            reduce using rule 80 (empty -> .)
    minus           reduce using rule 80 (empty -> .)
    id              reduce using rule 80 (empty -> .)
    c_int           reduce using rule 80 (empty -> .)
    c_decimal       reduce using rule 80 (empty -> .)
    c_string        reduce using rule 80 (empty -> .)
    false           reduce using rule 80 (empty -> .)
    true            reduce using rule 80 (empty -> .)

    NOT                            shift and go to state 240
    empty                          shift and go to state 90

state 217

    (50) EXPRESSION -> NOT SUPEREXP SEM_RESOLVE_NOT or SEM_PUSH_OPERATOR . NOT SUPEREXP SEM_RESOLVE_NOT SEM_RESOLVE_ANDOR
    (51) NOT -> . not SEM_PUSH_OPERATOR
    (52) NOT -> . empty
    (80) empty -> .

    not             shift and go to state 89
    lp              reduce using rule 80 (empty -> .)
    plus            reduce using rule 80 (empty -> .)
    minus           reduce using rule 80 (empty -> .)
    id              reduce using rule 80 (empty -> .)
    c_int           reduce using rule 80 (empty -> .)
    c_decimal       reduce using rule 80 (empty -> .)
    c_string        reduce using rule 80 (empty -> .)
    false           reduce using rule 80 (empty -> .)
    true            reduce using rule 80 (empty -> .)

    NOT                            shift and go to state 241
    empty                          shift and go to state 90

state 218

    (66) TERM -> FACTOR SEM_RESOLVE_TIMESDIVIDE divide SEM_PUSH_OPERATOR . TERM
    (64) TERM -> . FACTOR SEM_RESOLVE_TIMESDIVIDE
    (65) TERM -> . FACTOR SEM_RESOLVE_TIMESDIVIDE times SEM_PUSH_OPERATOR TERM
    (66) TERM -> . FACTOR SEM_RESOLVE_TIMESDIVIDE divide SEM_PUSH_OPERATOR TERM
    (67) FACTOR -> . lp SEM_PUSH_PAREN EXPRESSION rp SEM_POP_PAREN
    (68) FACTOR -> . CONSTANT
    (69) FACTOR -> . plus CONSTANT
    (70) FACTOR -> . minus CONSTANT
    (71) CONSTANT -> . id SEM_PUSH_OPERAND LISTINDEX
    (72) CONSTANT -> . id SEM_VERIFY_FUNC lp SEM_PUSH_PAREN SEM_GEN_ERA CALLPARAMETERS rp SEM_POP_PAREN SEM_VERIFY_NUM_PARAMS SEM_GEN_GOSUB_ASSIGN
    (73) CONSTANT -> . c_int SEM_PUSH_CONSTANT
    (74) CONSTANT -> . c_decimal SEM_PUSH_CONSTANT
    (75) CONSTANT -> . c_string SEM_PUSH_CONSTANT
    (76) CONSTANT -> . false SEM_PUSH_CONSTANT
    (77) CONSTANT -> . true SEM_PUSH_CONSTANT

    lp              shift and go to state 115
    plus            shift and go to state 120
    minus           shift and go to state 122
    id              shift and go to state 112
    c_int           shift and go to state 117
    c_decimal       shift and go to state 118
    c_string        shift and go to state 116
    false           shift and go to state 111
    true            shift and go to state 114

    TERM                           shift and go to state 242
    CONSTANT                       shift and go to state 109
    FACTOR                         shift and go to state 121

state 219

    (65) TERM -> FACTOR SEM_RESOLVE_TIMESDIVIDE times SEM_PUSH_OPERATOR . TERM
    (64) TERM -> . FACTOR SEM_RESOLVE_TIMESDIVIDE
    (65) TERM -> . FACTOR SEM_RESOLVE_TIMESDIVIDE times SEM_PUSH_OPERATOR TERM
    (66) TERM -> . FACTOR SEM_RESOLVE_TIMESDIVIDE divide SEM_PUSH_OPERATOR TERM
    (67) FACTOR -> . lp SEM_PUSH_PAREN EXPRESSION rp SEM_POP_PAREN
    (68) FACTOR -> . CONSTANT
    (69) FACTOR -> . plus CONSTANT
    (70) FACTOR -> . minus CONSTANT
    (71) CONSTANT -> . id SEM_PUSH_OPERAND LISTINDEX
    (72) CONSTANT -> . id SEM_VERIFY_FUNC lp SEM_PUSH_PAREN SEM_GEN_ERA CALLPARAMETERS rp SEM_POP_PAREN SEM_VERIFY_NUM_PARAMS SEM_GEN_GOSUB_ASSIGN
    (73) CONSTANT -> . c_int SEM_PUSH_CONSTANT
    (74) CONSTANT -> . c_decimal SEM_PUSH_CONSTANT
    (75) CONSTANT -> . c_string SEM_PUSH_CONSTANT
    (76) CONSTANT -> . false SEM_PUSH_CONSTANT
    (77) CONSTANT -> . true SEM_PUSH_CONSTANT

    lp              shift and go to state 115
    plus            shift and go to state 120
    minus           shift and go to state 122
    id              shift and go to state 112
    c_int           shift and go to state 117
    c_decimal       shift and go to state 118
    c_string        shift and go to state 116
    false           shift and go to state 111
    true            shift and go to state 114

    TERM                           shift and go to state 243
    CONSTANT                       shift and go to state 109
    FACTOR                         shift and go to state 121

state 220

    (16) FUNCTION -> function FUNCTYPE id SEM_ADD_FUNC lp FUNCPARAMETERS rp lk DECLARATIONS SEM_ADD_FUNC_START STATEMENTS rk . SEM_END_FUNC
    (85) SEM_END_FUNC -> . empty
    (80) empty -> .

    function        reduce using rule 80 (empty -> .)
    program         reduce using rule 80 (empty -> .)

    SEM_END_FUNC                   shift and go to state 244
    empty                          shift and go to state 245

state 221

    (46) LOOP -> while SEM_PUSH_START lp EXPRESSION rp SEM_GEN_GOTOF BLOCK . SEM_FILL_LOOP
    (104) SEM_FILL_LOOP -> . empty
    (80) empty -> .

    id              reduce using rule 80 (empty -> .)
    readto          reduce using rule 80 (empty -> .)
    print           reduce using rule 80 (empty -> .)
    if              reduce using rule 80 (empty -> .)
    while           reduce using rule 80 (empty -> .)
    return          reduce using rule 80 (empty -> .)
    rk              reduce using rule 80 (empty -> .)

    SEM_FILL_LOOP                  shift and go to state 246
    empty                          shift and go to state 247

state 222

    (37) READ -> readto SEM_PUSH_OPERATOR lp id SEM_PUSH_OPERAND SEM_GEN_READ rp . semicolon

    semicolon       shift and go to state 248


state 223

    (39) FUNCCALL -> id SEM_VERIFY_FUNC lp SEM_GEN_ERA CALLPARAMETERS rp SEM_VERIFY_NUM_PARAMS . semicolon SEM_GEN_GOSUB

    semicolon       shift and go to state 249


state 224

    (110) SEM_VERIFY_NUM_PARAMS -> empty .

    semicolon       reduce using rule 110 (SEM_VERIFY_NUM_PARAMS -> empty .)
    times           reduce using rule 110 (SEM_VERIFY_NUM_PARAMS -> empty .)
    divide          reduce using rule 110 (SEM_VERIFY_NUM_PARAMS -> empty .)
    plus            reduce using rule 110 (SEM_VERIFY_NUM_PARAMS -> empty .)
    minus           reduce using rule 110 (SEM_VERIFY_NUM_PARAMS -> empty .)
    gt              reduce using rule 110 (SEM_VERIFY_NUM_PARAMS -> empty .)
    ge              reduce using rule 110 (SEM_VERIFY_NUM_PARAMS -> empty .)
    lt              reduce using rule 110 (SEM_VERIFY_NUM_PARAMS -> empty .)
    le              reduce using rule 110 (SEM_VERIFY_NUM_PARAMS -> empty .)
    ee              reduce using rule 110 (SEM_VERIFY_NUM_PARAMS -> empty .)
    ne              reduce using rule 110 (SEM_VERIFY_NUM_PARAMS -> empty .)
    and             reduce using rule 110 (SEM_VERIFY_NUM_PARAMS -> empty .)
    or              reduce using rule 110 (SEM_VERIFY_NUM_PARAMS -> empty .)
    rp              reduce using rule 110 (SEM_VERIFY_NUM_PARAMS -> empty .)
    comma           reduce using rule 110 (SEM_VERIFY_NUM_PARAMS -> empty .)
    rb              reduce using rule 110 (SEM_VERIFY_NUM_PARAMS -> empty .)


state 225

    (41) CALLPARAMETERS -> EXPRESSION SEM_MATCH_PARAM comma . CALLPARAMETERS
    (40) CALLPARAMETERS -> . EXPRESSION SEM_MATCH_PARAM
    (41) CALLPARAMETERS -> . EXPRESSION SEM_MATCH_PARAM comma CALLPARAMETERS
    (42) CALLPARAMETERS -> . empty
    (48) EXPRESSION -> . NOT SUPEREXP SEM_RESOLVE_NOT
    (49) EXPRESSION -> . NOT SUPEREXP SEM_RESOLVE_NOT and SEM_PUSH_OPERATOR NOT SUPEREXP SEM_RESOLVE_NOT SEM_RESOLVE_ANDOR
    (50) EXPRESSION -> . NOT SUPEREXP SEM_RESOLVE_NOT or SEM_PUSH_OPERATOR NOT SUPEREXP SEM_RESOLVE_NOT SEM_RESOLVE_ANDOR
    (80) empty -> .
    (51) NOT -> . not SEM_PUSH_OPERATOR
    (52) NOT -> . empty

    rp              reduce using rule 80 (empty -> .)
    lp              reduce using rule 80 (empty -> .)
    plus            reduce using rule 80 (empty -> .)
    minus           reduce using rule 80 (empty -> .)
    id              reduce using rule 80 (empty -> .)
    c_int           reduce using rule 80 (empty -> .)
    c_decimal       reduce using rule 80 (empty -> .)
    c_string        reduce using rule 80 (empty -> .)
    false           reduce using rule 80 (empty -> .)
    true            reduce using rule 80 (empty -> .)
    not             shift and go to state 89

    CALLPARAMETERS                 shift and go to state 250
    NOT                            shift and go to state 91
    EXPRESSION                     shift and go to state 170
    empty                          shift and go to state 171

state 226

    (79) LISTREMOVE -> id SEM_PUSH_OPERAND LISTINDEX dot remove semicolon SEM_REMOVE_FROM_LIST .

    id              reduce using rule 79 (LISTREMOVE -> id SEM_PUSH_OPERAND LISTINDEX dot remove semicolon SEM_REMOVE_FROM_LIST .)
    readto          reduce using rule 79 (LISTREMOVE -> id SEM_PUSH_OPERAND LISTINDEX dot remove semicolon SEM_REMOVE_FROM_LIST .)
    print           reduce using rule 79 (LISTREMOVE -> id SEM_PUSH_OPERAND LISTINDEX dot remove semicolon SEM_REMOVE_FROM_LIST .)
    if              reduce using rule 79 (LISTREMOVE -> id SEM_PUSH_OPERAND LISTINDEX dot remove semicolon SEM_REMOVE_FROM_LIST .)
    while           reduce using rule 79 (LISTREMOVE -> id SEM_PUSH_OPERAND LISTINDEX dot remove semicolon SEM_REMOVE_FROM_LIST .)
    return          reduce using rule 79 (LISTREMOVE -> id SEM_PUSH_OPERAND LISTINDEX dot remove semicolon SEM_REMOVE_FROM_LIST .)
    rk              reduce using rule 79 (LISTREMOVE -> id SEM_PUSH_OPERAND LISTINDEX dot remove semicolon SEM_REMOVE_FROM_LIST .)


state 227

    (119) SEM_REMOVE_FROM_LIST -> empty .

    id              reduce using rule 119 (SEM_REMOVE_FROM_LIST -> empty .)
    readto          reduce using rule 119 (SEM_REMOVE_FROM_LIST -> empty .)
    print           reduce using rule 119 (SEM_REMOVE_FROM_LIST -> empty .)
    if              reduce using rule 119 (SEM_REMOVE_FROM_LIST -> empty .)
    while           reduce using rule 119 (SEM_REMOVE_FROM_LIST -> empty .)
    return          reduce using rule 119 (SEM_REMOVE_FROM_LIST -> empty .)
    rk              reduce using rule 119 (SEM_REMOVE_FROM_LIST -> empty .)


state 228

    (94) SEM_ASSIGN -> empty .

    semicolon       reduce using rule 94 (SEM_ASSIGN -> empty .)


state 229

    (34) ASSIGN -> id SEM_PUSH_OPERAND LISTINDEX equal SEM_PUSH_OPERATOR EXPRESSION SEM_ASSIGN . semicolon

    semicolon       shift and go to state 251


state 230

    (78) LISTADD -> id SEM_PUSH_OPERAND dot add lp EXP rp . SEM_ADD_TO_LIST semicolon
    (118) SEM_ADD_TO_LIST -> . empty
    (80) empty -> .

    semicolon       reduce using rule 80 (empty -> .)

    empty                          shift and go to state 253
    SEM_ADD_TO_LIST                shift and go to state 252

state 231

    (43) CONDITION -> if lp EXPRESSION rp SEM_GEN_GOTOF BLOCK ELSEBLOCK . SEM_FILL_END
    (102) SEM_FILL_END -> . empty
    (80) empty -> .

    id              reduce using rule 80 (empty -> .)
    readto          reduce using rule 80 (empty -> .)
    print           reduce using rule 80 (empty -> .)
    if              reduce using rule 80 (empty -> .)
    while           reduce using rule 80 (empty -> .)
    return          reduce using rule 80 (empty -> .)
    rk              reduce using rule 80 (empty -> .)

    empty                          shift and go to state 254
    SEM_FILL_END                   shift and go to state 255

state 232

    (45) ELSEBLOCK -> empty .

    id              reduce using rule 45 (ELSEBLOCK -> empty .)
    readto          reduce using rule 45 (ELSEBLOCK -> empty .)
    print           reduce using rule 45 (ELSEBLOCK -> empty .)
    if              reduce using rule 45 (ELSEBLOCK -> empty .)
    while           reduce using rule 45 (ELSEBLOCK -> empty .)
    return          reduce using rule 45 (ELSEBLOCK -> empty .)
    rk              reduce using rule 45 (ELSEBLOCK -> empty .)


state 233

    (44) ELSEBLOCK -> else . SEM_GENANDFILL_GOTO BLOCK
    (101) SEM_GENANDFILL_GOTO -> . empty
    (80) empty -> .

    lk              reduce using rule 80 (empty -> .)

    SEM_GENANDFILL_GOTO            shift and go to state 256
    empty                          shift and go to state 257

state 234

    (38) PRINT -> print SEM_PUSH_OPERATOR lp EXPRESSION rp SEM_PRINT semicolon .

    id              reduce using rule 38 (PRINT -> print SEM_PUSH_OPERATOR lp EXPRESSION rp SEM_PRINT semicolon .)
    readto          reduce using rule 38 (PRINT -> print SEM_PUSH_OPERATOR lp EXPRESSION rp SEM_PRINT semicolon .)
    print           reduce using rule 38 (PRINT -> print SEM_PUSH_OPERATOR lp EXPRESSION rp SEM_PRINT semicolon .)
    if              reduce using rule 38 (PRINT -> print SEM_PUSH_OPERATOR lp EXPRESSION rp SEM_PRINT semicolon .)
    while           reduce using rule 38 (PRINT -> print SEM_PUSH_OPERATOR lp EXPRESSION rp SEM_PRINT semicolon .)
    return          reduce using rule 38 (PRINT -> print SEM_PUSH_OPERATOR lp EXPRESSION rp SEM_PRINT semicolon .)
    rk              reduce using rule 38 (PRINT -> print SEM_PUSH_OPERATOR lp EXPRESSION rp SEM_PRINT semicolon .)


state 235

    (72) CONSTANT -> id SEM_VERIFY_FUNC lp SEM_PUSH_PAREN SEM_GEN_ERA . CALLPARAMETERS rp SEM_POP_PAREN SEM_VERIFY_NUM_PARAMS SEM_GEN_GOSUB_ASSIGN
    (40) CALLPARAMETERS -> . EXPRESSION SEM_MATCH_PARAM
    (41) CALLPARAMETERS -> . EXPRESSION SEM_MATCH_PARAM comma CALLPARAMETERS
    (42) CALLPARAMETERS -> . empty
    (48) EXPRESSION -> . NOT SUPEREXP SEM_RESOLVE_NOT
    (49) EXPRESSION -> . NOT SUPEREXP SEM_RESOLVE_NOT and SEM_PUSH_OPERATOR NOT SUPEREXP SEM_RESOLVE_NOT SEM_RESOLVE_ANDOR
    (50) EXPRESSION -> . NOT SUPEREXP SEM_RESOLVE_NOT or SEM_PUSH_OPERATOR NOT SUPEREXP SEM_RESOLVE_NOT SEM_RESOLVE_ANDOR
    (80) empty -> .
    (51) NOT -> . not SEM_PUSH_OPERATOR
    (52) NOT -> . empty

    rp              reduce using rule 80 (empty -> .)
    lp              reduce using rule 80 (empty -> .)
    plus            reduce using rule 80 (empty -> .)
    minus           reduce using rule 80 (empty -> .)
    id              reduce using rule 80 (empty -> .)
    c_int           reduce using rule 80 (empty -> .)
    c_decimal       reduce using rule 80 (empty -> .)
    c_string        reduce using rule 80 (empty -> .)
    false           reduce using rule 80 (empty -> .)
    true            reduce using rule 80 (empty -> .)
    not             shift and go to state 89

    CALLPARAMETERS                 shift and go to state 258
    NOT                            shift and go to state 91
    EXPRESSION                     shift and go to state 170
    empty                          shift and go to state 171

state 236

    (62) EXP -> TERM SEM_RESOLVE_PLUSMINUS plus SEM_PUSH_OPERATOR EXP .

    and             reduce using rule 62 (EXP -> TERM SEM_RESOLVE_PLUSMINUS plus SEM_PUSH_OPERATOR EXP .)
    or              reduce using rule 62 (EXP -> TERM SEM_RESOLVE_PLUSMINUS plus SEM_PUSH_OPERATOR EXP .)
    semicolon       reduce using rule 62 (EXP -> TERM SEM_RESOLVE_PLUSMINUS plus SEM_PUSH_OPERATOR EXP .)
    rp              reduce using rule 62 (EXP -> TERM SEM_RESOLVE_PLUSMINUS plus SEM_PUSH_OPERATOR EXP .)
    comma           reduce using rule 62 (EXP -> TERM SEM_RESOLVE_PLUSMINUS plus SEM_PUSH_OPERATOR EXP .)
    gt              reduce using rule 62 (EXP -> TERM SEM_RESOLVE_PLUSMINUS plus SEM_PUSH_OPERATOR EXP .)
    ge              reduce using rule 62 (EXP -> TERM SEM_RESOLVE_PLUSMINUS plus SEM_PUSH_OPERATOR EXP .)
    lt              reduce using rule 62 (EXP -> TERM SEM_RESOLVE_PLUSMINUS plus SEM_PUSH_OPERATOR EXP .)
    le              reduce using rule 62 (EXP -> TERM SEM_RESOLVE_PLUSMINUS plus SEM_PUSH_OPERATOR EXP .)
    ee              reduce using rule 62 (EXP -> TERM SEM_RESOLVE_PLUSMINUS plus SEM_PUSH_OPERATOR EXP .)
    ne              reduce using rule 62 (EXP -> TERM SEM_RESOLVE_PLUSMINUS plus SEM_PUSH_OPERATOR EXP .)
    rb              reduce using rule 62 (EXP -> TERM SEM_RESOLVE_PLUSMINUS plus SEM_PUSH_OPERATOR EXP .)


state 237

    (63) EXP -> TERM SEM_RESOLVE_PLUSMINUS minus SEM_PUSH_OPERATOR EXP .

    and             reduce using rule 63 (EXP -> TERM SEM_RESOLVE_PLUSMINUS minus SEM_PUSH_OPERATOR EXP .)
    or              reduce using rule 63 (EXP -> TERM SEM_RESOLVE_PLUSMINUS minus SEM_PUSH_OPERATOR EXP .)
    semicolon       reduce using rule 63 (EXP -> TERM SEM_RESOLVE_PLUSMINUS minus SEM_PUSH_OPERATOR EXP .)
    rp              reduce using rule 63 (EXP -> TERM SEM_RESOLVE_PLUSMINUS minus SEM_PUSH_OPERATOR EXP .)
    comma           reduce using rule 63 (EXP -> TERM SEM_RESOLVE_PLUSMINUS minus SEM_PUSH_OPERATOR EXP .)
    gt              reduce using rule 63 (EXP -> TERM SEM_RESOLVE_PLUSMINUS minus SEM_PUSH_OPERATOR EXP .)
    ge              reduce using rule 63 (EXP -> TERM SEM_RESOLVE_PLUSMINUS minus SEM_PUSH_OPERATOR EXP .)
    lt              reduce using rule 63 (EXP -> TERM SEM_RESOLVE_PLUSMINUS minus SEM_PUSH_OPERATOR EXP .)
    le              reduce using rule 63 (EXP -> TERM SEM_RESOLVE_PLUSMINUS minus SEM_PUSH_OPERATOR EXP .)
    ee              reduce using rule 63 (EXP -> TERM SEM_RESOLVE_PLUSMINUS minus SEM_PUSH_OPERATOR EXP .)
    ne              reduce using rule 63 (EXP -> TERM SEM_RESOLVE_PLUSMINUS minus SEM_PUSH_OPERATOR EXP .)
    rb              reduce using rule 63 (EXP -> TERM SEM_RESOLVE_PLUSMINUS minus SEM_PUSH_OPERATOR EXP .)


state 238

    (67) FACTOR -> lp SEM_PUSH_PAREN EXPRESSION rp SEM_POP_PAREN .

    times           reduce using rule 67 (FACTOR -> lp SEM_PUSH_PAREN EXPRESSION rp SEM_POP_PAREN .)
    divide          reduce using rule 67 (FACTOR -> lp SEM_PUSH_PAREN EXPRESSION rp SEM_POP_PAREN .)
    plus            reduce using rule 67 (FACTOR -> lp SEM_PUSH_PAREN EXPRESSION rp SEM_POP_PAREN .)
    minus           reduce using rule 67 (FACTOR -> lp SEM_PUSH_PAREN EXPRESSION rp SEM_POP_PAREN .)
    gt              reduce using rule 67 (FACTOR -> lp SEM_PUSH_PAREN EXPRESSION rp SEM_POP_PAREN .)
    ge              reduce using rule 67 (FACTOR -> lp SEM_PUSH_PAREN EXPRESSION rp SEM_POP_PAREN .)
    lt              reduce using rule 67 (FACTOR -> lp SEM_PUSH_PAREN EXPRESSION rp SEM_POP_PAREN .)
    le              reduce using rule 67 (FACTOR -> lp SEM_PUSH_PAREN EXPRESSION rp SEM_POP_PAREN .)
    ee              reduce using rule 67 (FACTOR -> lp SEM_PUSH_PAREN EXPRESSION rp SEM_POP_PAREN .)
    ne              reduce using rule 67 (FACTOR -> lp SEM_PUSH_PAREN EXPRESSION rp SEM_POP_PAREN .)
    semicolon       reduce using rule 67 (FACTOR -> lp SEM_PUSH_PAREN EXPRESSION rp SEM_POP_PAREN .)
    rp              reduce using rule 67 (FACTOR -> lp SEM_PUSH_PAREN EXPRESSION rp SEM_POP_PAREN .)
    comma           reduce using rule 67 (FACTOR -> lp SEM_PUSH_PAREN EXPRESSION rp SEM_POP_PAREN .)
    and             reduce using rule 67 (FACTOR -> lp SEM_PUSH_PAREN EXPRESSION rp SEM_POP_PAREN .)
    or              reduce using rule 67 (FACTOR -> lp SEM_PUSH_PAREN EXPRESSION rp SEM_POP_PAREN .)
    rb              reduce using rule 67 (FACTOR -> lp SEM_PUSH_PAREN EXPRESSION rp SEM_POP_PAREN .)


state 239

    (93) SEM_POP_PAREN -> empty .

    times           reduce using rule 93 (SEM_POP_PAREN -> empty .)
    divide          reduce using rule 93 (SEM_POP_PAREN -> empty .)
    plus            reduce using rule 93 (SEM_POP_PAREN -> empty .)
    minus           reduce using rule 93 (SEM_POP_PAREN -> empty .)
    gt              reduce using rule 93 (SEM_POP_PAREN -> empty .)
    ge              reduce using rule 93 (SEM_POP_PAREN -> empty .)
    lt              reduce using rule 93 (SEM_POP_PAREN -> empty .)
    le              reduce using rule 93 (SEM_POP_PAREN -> empty .)
    ee              reduce using rule 93 (SEM_POP_PAREN -> empty .)
    ne              reduce using rule 93 (SEM_POP_PAREN -> empty .)
    and             reduce using rule 93 (SEM_POP_PAREN -> empty .)
    or              reduce using rule 93 (SEM_POP_PAREN -> empty .)
    semicolon       reduce using rule 93 (SEM_POP_PAREN -> empty .)
    rp              reduce using rule 93 (SEM_POP_PAREN -> empty .)
    comma           reduce using rule 93 (SEM_POP_PAREN -> empty .)
    rb              reduce using rule 93 (SEM_POP_PAREN -> empty .)


state 240

    (49) EXPRESSION -> NOT SUPEREXP SEM_RESOLVE_NOT and SEM_PUSH_OPERATOR NOT . SUPEREXP SEM_RESOLVE_NOT SEM_RESOLVE_ANDOR
    (53) SUPEREXP -> . EXP
    (54) SUPEREXP -> . EXP RELOP EXP SEM_RESOLVE_RELOP
    (61) EXP -> . TERM SEM_RESOLVE_PLUSMINUS
    (62) EXP -> . TERM SEM_RESOLVE_PLUSMINUS plus SEM_PUSH_OPERATOR EXP
    (63) EXP -> . TERM SEM_RESOLVE_PLUSMINUS minus SEM_PUSH_OPERATOR EXP
    (64) TERM -> . FACTOR SEM_RESOLVE_TIMESDIVIDE
    (65) TERM -> . FACTOR SEM_RESOLVE_TIMESDIVIDE times SEM_PUSH_OPERATOR TERM
    (66) TERM -> . FACTOR SEM_RESOLVE_TIMESDIVIDE divide SEM_PUSH_OPERATOR TERM
    (67) FACTOR -> . lp SEM_PUSH_PAREN EXPRESSION rp SEM_POP_PAREN
    (68) FACTOR -> . CONSTANT
    (69) FACTOR -> . plus CONSTANT
    (70) FACTOR -> . minus CONSTANT
    (71) CONSTANT -> . id SEM_PUSH_OPERAND LISTINDEX
    (72) CONSTANT -> . id SEM_VERIFY_FUNC lp SEM_PUSH_PAREN SEM_GEN_ERA CALLPARAMETERS rp SEM_POP_PAREN SEM_VERIFY_NUM_PARAMS SEM_GEN_GOSUB_ASSIGN
    (73) CONSTANT -> . c_int SEM_PUSH_CONSTANT
    (74) CONSTANT -> . c_decimal SEM_PUSH_CONSTANT
    (75) CONSTANT -> . c_string SEM_PUSH_CONSTANT
    (76) CONSTANT -> . false SEM_PUSH_CONSTANT
    (77) CONSTANT -> . true SEM_PUSH_CONSTANT

    lp              shift and go to state 115
    plus            shift and go to state 120
    minus           shift and go to state 122
    id              shift and go to state 112
    c_int           shift and go to state 117
    c_decimal       shift and go to state 118
    c_string        shift and go to state 116
    false           shift and go to state 111
    true            shift and go to state 114

    CONSTANT                       shift and go to state 109
    EXP                            shift and go to state 110
    TERM                           shift and go to state 113
    SUPEREXP                       shift and go to state 259
    FACTOR                         shift and go to state 121

state 241

    (50) EXPRESSION -> NOT SUPEREXP SEM_RESOLVE_NOT or SEM_PUSH_OPERATOR NOT . SUPEREXP SEM_RESOLVE_NOT SEM_RESOLVE_ANDOR
    (53) SUPEREXP -> . EXP
    (54) SUPEREXP -> . EXP RELOP EXP SEM_RESOLVE_RELOP
    (61) EXP -> . TERM SEM_RESOLVE_PLUSMINUS
    (62) EXP -> . TERM SEM_RESOLVE_PLUSMINUS plus SEM_PUSH_OPERATOR EXP
    (63) EXP -> . TERM SEM_RESOLVE_PLUSMINUS minus SEM_PUSH_OPERATOR EXP
    (64) TERM -> . FACTOR SEM_RESOLVE_TIMESDIVIDE
    (65) TERM -> . FACTOR SEM_RESOLVE_TIMESDIVIDE times SEM_PUSH_OPERATOR TERM
    (66) TERM -> . FACTOR SEM_RESOLVE_TIMESDIVIDE divide SEM_PUSH_OPERATOR TERM
    (67) FACTOR -> . lp SEM_PUSH_PAREN EXPRESSION rp SEM_POP_PAREN
    (68) FACTOR -> . CONSTANT
    (69) FACTOR -> . plus CONSTANT
    (70) FACTOR -> . minus CONSTANT
    (71) CONSTANT -> . id SEM_PUSH_OPERAND LISTINDEX
    (72) CONSTANT -> . id SEM_VERIFY_FUNC lp SEM_PUSH_PAREN SEM_GEN_ERA CALLPARAMETERS rp SEM_POP_PAREN SEM_VERIFY_NUM_PARAMS SEM_GEN_GOSUB_ASSIGN
    (73) CONSTANT -> . c_int SEM_PUSH_CONSTANT
    (74) CONSTANT -> . c_decimal SEM_PUSH_CONSTANT
    (75) CONSTANT -> . c_string SEM_PUSH_CONSTANT
    (76) CONSTANT -> . false SEM_PUSH_CONSTANT
    (77) CONSTANT -> . true SEM_PUSH_CONSTANT

    lp              shift and go to state 115
    plus            shift and go to state 120
    minus           shift and go to state 122
    id              shift and go to state 112
    c_int           shift and go to state 117
    c_decimal       shift and go to state 118
    c_string        shift and go to state 116
    false           shift and go to state 111
    true            shift and go to state 114

    CONSTANT                       shift and go to state 109
    EXP                            shift and go to state 110
    TERM                           shift and go to state 113
    SUPEREXP                       shift and go to state 260
    FACTOR                         shift and go to state 121

state 242

    (66) TERM -> FACTOR SEM_RESOLVE_TIMESDIVIDE divide SEM_PUSH_OPERATOR TERM .

    plus            reduce using rule 66 (TERM -> FACTOR SEM_RESOLVE_TIMESDIVIDE divide SEM_PUSH_OPERATOR TERM .)
    minus           reduce using rule 66 (TERM -> FACTOR SEM_RESOLVE_TIMESDIVIDE divide SEM_PUSH_OPERATOR TERM .)
    gt              reduce using rule 66 (TERM -> FACTOR SEM_RESOLVE_TIMESDIVIDE divide SEM_PUSH_OPERATOR TERM .)
    ge              reduce using rule 66 (TERM -> FACTOR SEM_RESOLVE_TIMESDIVIDE divide SEM_PUSH_OPERATOR TERM .)
    lt              reduce using rule 66 (TERM -> FACTOR SEM_RESOLVE_TIMESDIVIDE divide SEM_PUSH_OPERATOR TERM .)
    le              reduce using rule 66 (TERM -> FACTOR SEM_RESOLVE_TIMESDIVIDE divide SEM_PUSH_OPERATOR TERM .)
    ee              reduce using rule 66 (TERM -> FACTOR SEM_RESOLVE_TIMESDIVIDE divide SEM_PUSH_OPERATOR TERM .)
    ne              reduce using rule 66 (TERM -> FACTOR SEM_RESOLVE_TIMESDIVIDE divide SEM_PUSH_OPERATOR TERM .)
    semicolon       reduce using rule 66 (TERM -> FACTOR SEM_RESOLVE_TIMESDIVIDE divide SEM_PUSH_OPERATOR TERM .)
    rp              reduce using rule 66 (TERM -> FACTOR SEM_RESOLVE_TIMESDIVIDE divide SEM_PUSH_OPERATOR TERM .)
    comma           reduce using rule 66 (TERM -> FACTOR SEM_RESOLVE_TIMESDIVIDE divide SEM_PUSH_OPERATOR TERM .)
    and             reduce using rule 66 (TERM -> FACTOR SEM_RESOLVE_TIMESDIVIDE divide SEM_PUSH_OPERATOR TERM .)
    or              reduce using rule 66 (TERM -> FACTOR SEM_RESOLVE_TIMESDIVIDE divide SEM_PUSH_OPERATOR TERM .)
    rb              reduce using rule 66 (TERM -> FACTOR SEM_RESOLVE_TIMESDIVIDE divide SEM_PUSH_OPERATOR TERM .)


state 243

    (65) TERM -> FACTOR SEM_RESOLVE_TIMESDIVIDE times SEM_PUSH_OPERATOR TERM .

    plus            reduce using rule 65 (TERM -> FACTOR SEM_RESOLVE_TIMESDIVIDE times SEM_PUSH_OPERATOR TERM .)
    minus           reduce using rule 65 (TERM -> FACTOR SEM_RESOLVE_TIMESDIVIDE times SEM_PUSH_OPERATOR TERM .)
    gt              reduce using rule 65 (TERM -> FACTOR SEM_RESOLVE_TIMESDIVIDE times SEM_PUSH_OPERATOR TERM .)
    ge              reduce using rule 65 (TERM -> FACTOR SEM_RESOLVE_TIMESDIVIDE times SEM_PUSH_OPERATOR TERM .)
    lt              reduce using rule 65 (TERM -> FACTOR SEM_RESOLVE_TIMESDIVIDE times SEM_PUSH_OPERATOR TERM .)
    le              reduce using rule 65 (TERM -> FACTOR SEM_RESOLVE_TIMESDIVIDE times SEM_PUSH_OPERATOR TERM .)
    ee              reduce using rule 65 (TERM -> FACTOR SEM_RESOLVE_TIMESDIVIDE times SEM_PUSH_OPERATOR TERM .)
    ne              reduce using rule 65 (TERM -> FACTOR SEM_RESOLVE_TIMESDIVIDE times SEM_PUSH_OPERATOR TERM .)
    semicolon       reduce using rule 65 (TERM -> FACTOR SEM_RESOLVE_TIMESDIVIDE times SEM_PUSH_OPERATOR TERM .)
    rp              reduce using rule 65 (TERM -> FACTOR SEM_RESOLVE_TIMESDIVIDE times SEM_PUSH_OPERATOR TERM .)
    comma           reduce using rule 65 (TERM -> FACTOR SEM_RESOLVE_TIMESDIVIDE times SEM_PUSH_OPERATOR TERM .)
    and             reduce using rule 65 (TERM -> FACTOR SEM_RESOLVE_TIMESDIVIDE times SEM_PUSH_OPERATOR TERM .)
    or              reduce using rule 65 (TERM -> FACTOR SEM_RESOLVE_TIMESDIVIDE times SEM_PUSH_OPERATOR TERM .)
    rb              reduce using rule 65 (TERM -> FACTOR SEM_RESOLVE_TIMESDIVIDE times SEM_PUSH_OPERATOR TERM .)


state 244

    (16) FUNCTION -> function FUNCTYPE id SEM_ADD_FUNC lp FUNCPARAMETERS rp lk DECLARATIONS SEM_ADD_FUNC_START STATEMENTS rk SEM_END_FUNC .

    function        reduce using rule 16 (FUNCTION -> function FUNCTYPE id SEM_ADD_FUNC lp FUNCPARAMETERS rp lk DECLARATIONS SEM_ADD_FUNC_START STATEMENTS rk SEM_END_FUNC .)
    program         reduce using rule 16 (FUNCTION -> function FUNCTYPE id SEM_ADD_FUNC lp FUNCPARAMETERS rp lk DECLARATIONS SEM_ADD_FUNC_START STATEMENTS rk SEM_END_FUNC .)


state 245

    (85) SEM_END_FUNC -> empty .

    function        reduce using rule 85 (SEM_END_FUNC -> empty .)
    program         reduce using rule 85 (SEM_END_FUNC -> empty .)


state 246

    (46) LOOP -> while SEM_PUSH_START lp EXPRESSION rp SEM_GEN_GOTOF BLOCK SEM_FILL_LOOP .

    id              reduce using rule 46 (LOOP -> while SEM_PUSH_START lp EXPRESSION rp SEM_GEN_GOTOF BLOCK SEM_FILL_LOOP .)
    readto          reduce using rule 46 (LOOP -> while SEM_PUSH_START lp EXPRESSION rp SEM_GEN_GOTOF BLOCK SEM_FILL_LOOP .)
    print           reduce using rule 46 (LOOP -> while SEM_PUSH_START lp EXPRESSION rp SEM_GEN_GOTOF BLOCK SEM_FILL_LOOP .)
    if              reduce using rule 46 (LOOP -> while SEM_PUSH_START lp EXPRESSION rp SEM_GEN_GOTOF BLOCK SEM_FILL_LOOP .)
    while           reduce using rule 46 (LOOP -> while SEM_PUSH_START lp EXPRESSION rp SEM_GEN_GOTOF BLOCK SEM_FILL_LOOP .)
    return          reduce using rule 46 (LOOP -> while SEM_PUSH_START lp EXPRESSION rp SEM_GEN_GOTOF BLOCK SEM_FILL_LOOP .)
    rk              reduce using rule 46 (LOOP -> while SEM_PUSH_START lp EXPRESSION rp SEM_GEN_GOTOF BLOCK SEM_FILL_LOOP .)


state 247

    (104) SEM_FILL_LOOP -> empty .

    id              reduce using rule 104 (SEM_FILL_LOOP -> empty .)
    readto          reduce using rule 104 (SEM_FILL_LOOP -> empty .)
    print           reduce using rule 104 (SEM_FILL_LOOP -> empty .)
    if              reduce using rule 104 (SEM_FILL_LOOP -> empty .)
    while           reduce using rule 104 (SEM_FILL_LOOP -> empty .)
    return          reduce using rule 104 (SEM_FILL_LOOP -> empty .)
    rk              reduce using rule 104 (SEM_FILL_LOOP -> empty .)


state 248

    (37) READ -> readto SEM_PUSH_OPERATOR lp id SEM_PUSH_OPERAND SEM_GEN_READ rp semicolon .

    id              reduce using rule 37 (READ -> readto SEM_PUSH_OPERATOR lp id SEM_PUSH_OPERAND SEM_GEN_READ rp semicolon .)
    readto          reduce using rule 37 (READ -> readto SEM_PUSH_OPERATOR lp id SEM_PUSH_OPERAND SEM_GEN_READ rp semicolon .)
    print           reduce using rule 37 (READ -> readto SEM_PUSH_OPERATOR lp id SEM_PUSH_OPERAND SEM_GEN_READ rp semicolon .)
    if              reduce using rule 37 (READ -> readto SEM_PUSH_OPERATOR lp id SEM_PUSH_OPERAND SEM_GEN_READ rp semicolon .)
    while           reduce using rule 37 (READ -> readto SEM_PUSH_OPERATOR lp id SEM_PUSH_OPERAND SEM_GEN_READ rp semicolon .)
    return          reduce using rule 37 (READ -> readto SEM_PUSH_OPERATOR lp id SEM_PUSH_OPERAND SEM_GEN_READ rp semicolon .)
    rk              reduce using rule 37 (READ -> readto SEM_PUSH_OPERATOR lp id SEM_PUSH_OPERAND SEM_GEN_READ rp semicolon .)


state 249

    (39) FUNCCALL -> id SEM_VERIFY_FUNC lp SEM_GEN_ERA CALLPARAMETERS rp SEM_VERIFY_NUM_PARAMS semicolon . SEM_GEN_GOSUB
    (111) SEM_GEN_GOSUB -> . empty
    (80) empty -> .

    id              reduce using rule 80 (empty -> .)
    readto          reduce using rule 80 (empty -> .)
    print           reduce using rule 80 (empty -> .)
    if              reduce using rule 80 (empty -> .)
    while           reduce using rule 80 (empty -> .)
    return          reduce using rule 80 (empty -> .)
    rk              reduce using rule 80 (empty -> .)

    SEM_GEN_GOSUB                  shift and go to state 261
    empty                          shift and go to state 262

state 250

    (41) CALLPARAMETERS -> EXPRESSION SEM_MATCH_PARAM comma CALLPARAMETERS .

    rp              reduce using rule 41 (CALLPARAMETERS -> EXPRESSION SEM_MATCH_PARAM comma CALLPARAMETERS .)


state 251

    (34) ASSIGN -> id SEM_PUSH_OPERAND LISTINDEX equal SEM_PUSH_OPERATOR EXPRESSION SEM_ASSIGN semicolon .

    id              reduce using rule 34 (ASSIGN -> id SEM_PUSH_OPERAND LISTINDEX equal SEM_PUSH_OPERATOR EXPRESSION SEM_ASSIGN semicolon .)
    readto          reduce using rule 34 (ASSIGN -> id SEM_PUSH_OPERAND LISTINDEX equal SEM_PUSH_OPERATOR EXPRESSION SEM_ASSIGN semicolon .)
    print           reduce using rule 34 (ASSIGN -> id SEM_PUSH_OPERAND LISTINDEX equal SEM_PUSH_OPERATOR EXPRESSION SEM_ASSIGN semicolon .)
    if              reduce using rule 34 (ASSIGN -> id SEM_PUSH_OPERAND LISTINDEX equal SEM_PUSH_OPERATOR EXPRESSION SEM_ASSIGN semicolon .)
    while           reduce using rule 34 (ASSIGN -> id SEM_PUSH_OPERAND LISTINDEX equal SEM_PUSH_OPERATOR EXPRESSION SEM_ASSIGN semicolon .)
    return          reduce using rule 34 (ASSIGN -> id SEM_PUSH_OPERAND LISTINDEX equal SEM_PUSH_OPERATOR EXPRESSION SEM_ASSIGN semicolon .)
    rk              reduce using rule 34 (ASSIGN -> id SEM_PUSH_OPERAND LISTINDEX equal SEM_PUSH_OPERATOR EXPRESSION SEM_ASSIGN semicolon .)


state 252

    (78) LISTADD -> id SEM_PUSH_OPERAND dot add lp EXP rp SEM_ADD_TO_LIST . semicolon

    semicolon       shift and go to state 263


state 253

    (118) SEM_ADD_TO_LIST -> empty .

    semicolon       reduce using rule 118 (SEM_ADD_TO_LIST -> empty .)


state 254

    (102) SEM_FILL_END -> empty .

    id              reduce using rule 102 (SEM_FILL_END -> empty .)
    readto          reduce using rule 102 (SEM_FILL_END -> empty .)
    print           reduce using rule 102 (SEM_FILL_END -> empty .)
    if              reduce using rule 102 (SEM_FILL_END -> empty .)
    while           reduce using rule 102 (SEM_FILL_END -> empty .)
    return          reduce using rule 102 (SEM_FILL_END -> empty .)
    rk              reduce using rule 102 (SEM_FILL_END -> empty .)


state 255

    (43) CONDITION -> if lp EXPRESSION rp SEM_GEN_GOTOF BLOCK ELSEBLOCK SEM_FILL_END .

    id              reduce using rule 43 (CONDITION -> if lp EXPRESSION rp SEM_GEN_GOTOF BLOCK ELSEBLOCK SEM_FILL_END .)
    readto          reduce using rule 43 (CONDITION -> if lp EXPRESSION rp SEM_GEN_GOTOF BLOCK ELSEBLOCK SEM_FILL_END .)
    print           reduce using rule 43 (CONDITION -> if lp EXPRESSION rp SEM_GEN_GOTOF BLOCK ELSEBLOCK SEM_FILL_END .)
    if              reduce using rule 43 (CONDITION -> if lp EXPRESSION rp SEM_GEN_GOTOF BLOCK ELSEBLOCK SEM_FILL_END .)
    while           reduce using rule 43 (CONDITION -> if lp EXPRESSION rp SEM_GEN_GOTOF BLOCK ELSEBLOCK SEM_FILL_END .)
    return          reduce using rule 43 (CONDITION -> if lp EXPRESSION rp SEM_GEN_GOTOF BLOCK ELSEBLOCK SEM_FILL_END .)
    rk              reduce using rule 43 (CONDITION -> if lp EXPRESSION rp SEM_GEN_GOTOF BLOCK ELSEBLOCK SEM_FILL_END .)


state 256

    (44) ELSEBLOCK -> else SEM_GENANDFILL_GOTO . BLOCK
    (22) BLOCK -> . lk STATEMENTS rk

    lk              shift and go to state 50

    BLOCK                          shift and go to state 264

state 257

    (101) SEM_GENANDFILL_GOTO -> empty .

    lk              reduce using rule 101 (SEM_GENANDFILL_GOTO -> empty .)


state 258

    (72) CONSTANT -> id SEM_VERIFY_FUNC lp SEM_PUSH_PAREN SEM_GEN_ERA CALLPARAMETERS . rp SEM_POP_PAREN SEM_VERIFY_NUM_PARAMS SEM_GEN_GOSUB_ASSIGN

    rp              shift and go to state 265


state 259

    (49) EXPRESSION -> NOT SUPEREXP SEM_RESOLVE_NOT and SEM_PUSH_OPERATOR NOT SUPEREXP . SEM_RESOLVE_NOT SEM_RESOLVE_ANDOR
    (99) SEM_RESOLVE_NOT -> . empty
    (80) empty -> .

    semicolon       reduce using rule 80 (empty -> .)
    rp              reduce using rule 80 (empty -> .)
    comma           reduce using rule 80 (empty -> .)

    SEM_RESOLVE_NOT                shift and go to state 266
    empty                          shift and go to state 157

state 260

    (50) EXPRESSION -> NOT SUPEREXP SEM_RESOLVE_NOT or SEM_PUSH_OPERATOR NOT SUPEREXP . SEM_RESOLVE_NOT SEM_RESOLVE_ANDOR
    (99) SEM_RESOLVE_NOT -> . empty
    (80) empty -> .

    semicolon       reduce using rule 80 (empty -> .)
    rp              reduce using rule 80 (empty -> .)
    comma           reduce using rule 80 (empty -> .)

    SEM_RESOLVE_NOT                shift and go to state 267
    empty                          shift and go to state 157

state 261

    (39) FUNCCALL -> id SEM_VERIFY_FUNC lp SEM_GEN_ERA CALLPARAMETERS rp SEM_VERIFY_NUM_PARAMS semicolon SEM_GEN_GOSUB .

    id              reduce using rule 39 (FUNCCALL -> id SEM_VERIFY_FUNC lp SEM_GEN_ERA CALLPARAMETERS rp SEM_VERIFY_NUM_PARAMS semicolon SEM_GEN_GOSUB .)
    readto          reduce using rule 39 (FUNCCALL -> id SEM_VERIFY_FUNC lp SEM_GEN_ERA CALLPARAMETERS rp SEM_VERIFY_NUM_PARAMS semicolon SEM_GEN_GOSUB .)
    print           reduce using rule 39 (FUNCCALL -> id SEM_VERIFY_FUNC lp SEM_GEN_ERA CALLPARAMETERS rp SEM_VERIFY_NUM_PARAMS semicolon SEM_GEN_GOSUB .)
    if              reduce using rule 39 (FUNCCALL -> id SEM_VERIFY_FUNC lp SEM_GEN_ERA CALLPARAMETERS rp SEM_VERIFY_NUM_PARAMS semicolon SEM_GEN_GOSUB .)
    while           reduce using rule 39 (FUNCCALL -> id SEM_VERIFY_FUNC lp SEM_GEN_ERA CALLPARAMETERS rp SEM_VERIFY_NUM_PARAMS semicolon SEM_GEN_GOSUB .)
    return          reduce using rule 39 (FUNCCALL -> id SEM_VERIFY_FUNC lp SEM_GEN_ERA CALLPARAMETERS rp SEM_VERIFY_NUM_PARAMS semicolon SEM_GEN_GOSUB .)
    rk              reduce using rule 39 (FUNCCALL -> id SEM_VERIFY_FUNC lp SEM_GEN_ERA CALLPARAMETERS rp SEM_VERIFY_NUM_PARAMS semicolon SEM_GEN_GOSUB .)


state 262

    (111) SEM_GEN_GOSUB -> empty .

    id              reduce using rule 111 (SEM_GEN_GOSUB -> empty .)
    readto          reduce using rule 111 (SEM_GEN_GOSUB -> empty .)
    print           reduce using rule 111 (SEM_GEN_GOSUB -> empty .)
    if              reduce using rule 111 (SEM_GEN_GOSUB -> empty .)
    while           reduce using rule 111 (SEM_GEN_GOSUB -> empty .)
    return          reduce using rule 111 (SEM_GEN_GOSUB -> empty .)
    rk              reduce using rule 111 (SEM_GEN_GOSUB -> empty .)


state 263

    (78) LISTADD -> id SEM_PUSH_OPERAND dot add lp EXP rp SEM_ADD_TO_LIST semicolon .

    id              reduce using rule 78 (LISTADD -> id SEM_PUSH_OPERAND dot add lp EXP rp SEM_ADD_TO_LIST semicolon .)
    readto          reduce using rule 78 (LISTADD -> id SEM_PUSH_OPERAND dot add lp EXP rp SEM_ADD_TO_LIST semicolon .)
    print           reduce using rule 78 (LISTADD -> id SEM_PUSH_OPERAND dot add lp EXP rp SEM_ADD_TO_LIST semicolon .)
    if              reduce using rule 78 (LISTADD -> id SEM_PUSH_OPERAND dot add lp EXP rp SEM_ADD_TO_LIST semicolon .)
    while           reduce using rule 78 (LISTADD -> id SEM_PUSH_OPERAND dot add lp EXP rp SEM_ADD_TO_LIST semicolon .)
    return          reduce using rule 78 (LISTADD -> id SEM_PUSH_OPERAND dot add lp EXP rp SEM_ADD_TO_LIST semicolon .)
    rk              reduce using rule 78 (LISTADD -> id SEM_PUSH_OPERAND dot add lp EXP rp SEM_ADD_TO_LIST semicolon .)


state 264

    (44) ELSEBLOCK -> else SEM_GENANDFILL_GOTO BLOCK .

    id              reduce using rule 44 (ELSEBLOCK -> else SEM_GENANDFILL_GOTO BLOCK .)
    readto          reduce using rule 44 (ELSEBLOCK -> else SEM_GENANDFILL_GOTO BLOCK .)
    print           reduce using rule 44 (ELSEBLOCK -> else SEM_GENANDFILL_GOTO BLOCK .)
    if              reduce using rule 44 (ELSEBLOCK -> else SEM_GENANDFILL_GOTO BLOCK .)
    while           reduce using rule 44 (ELSEBLOCK -> else SEM_GENANDFILL_GOTO BLOCK .)
    return          reduce using rule 44 (ELSEBLOCK -> else SEM_GENANDFILL_GOTO BLOCK .)
    rk              reduce using rule 44 (ELSEBLOCK -> else SEM_GENANDFILL_GOTO BLOCK .)


state 265

    (72) CONSTANT -> id SEM_VERIFY_FUNC lp SEM_PUSH_PAREN SEM_GEN_ERA CALLPARAMETERS rp . SEM_POP_PAREN SEM_VERIFY_NUM_PARAMS SEM_GEN_GOSUB_ASSIGN
    (93) SEM_POP_PAREN -> . empty
    (80) empty -> .

    times           reduce using rule 80 (empty -> .)
    divide          reduce using rule 80 (empty -> .)
    plus            reduce using rule 80 (empty -> .)
    minus           reduce using rule 80 (empty -> .)
    gt              reduce using rule 80 (empty -> .)
    ge              reduce using rule 80 (empty -> .)
    lt              reduce using rule 80 (empty -> .)
    le              reduce using rule 80 (empty -> .)
    ee              reduce using rule 80 (empty -> .)
    ne              reduce using rule 80 (empty -> .)
    and             reduce using rule 80 (empty -> .)
    or              reduce using rule 80 (empty -> .)
    semicolon       reduce using rule 80 (empty -> .)
    rp              reduce using rule 80 (empty -> .)
    comma           reduce using rule 80 (empty -> .)
    rb              reduce using rule 80 (empty -> .)

    SEM_POP_PAREN                  shift and go to state 268
    empty                          shift and go to state 239

state 266

    (49) EXPRESSION -> NOT SUPEREXP SEM_RESOLVE_NOT and SEM_PUSH_OPERATOR NOT SUPEREXP SEM_RESOLVE_NOT . SEM_RESOLVE_ANDOR
    (98) SEM_RESOLVE_ANDOR -> . empty
    (80) empty -> .

    semicolon       reduce using rule 80 (empty -> .)
    rp              reduce using rule 80 (empty -> .)
    comma           reduce using rule 80 (empty -> .)

    SEM_RESOLVE_ANDOR              shift and go to state 269
    empty                          shift and go to state 270

state 267

    (50) EXPRESSION -> NOT SUPEREXP SEM_RESOLVE_NOT or SEM_PUSH_OPERATOR NOT SUPEREXP SEM_RESOLVE_NOT . SEM_RESOLVE_ANDOR
    (98) SEM_RESOLVE_ANDOR -> . empty
    (80) empty -> .

    semicolon       reduce using rule 80 (empty -> .)
    rp              reduce using rule 80 (empty -> .)
    comma           reduce using rule 80 (empty -> .)

    SEM_RESOLVE_ANDOR              shift and go to state 271
    empty                          shift and go to state 270

state 268

    (72) CONSTANT -> id SEM_VERIFY_FUNC lp SEM_PUSH_PAREN SEM_GEN_ERA CALLPARAMETERS rp SEM_POP_PAREN . SEM_VERIFY_NUM_PARAMS SEM_GEN_GOSUB_ASSIGN
    (110) SEM_VERIFY_NUM_PARAMS -> . empty
    (80) empty -> .

    times           reduce using rule 80 (empty -> .)
    divide          reduce using rule 80 (empty -> .)
    plus            reduce using rule 80 (empty -> .)
    minus           reduce using rule 80 (empty -> .)
    gt              reduce using rule 80 (empty -> .)
    ge              reduce using rule 80 (empty -> .)
    lt              reduce using rule 80 (empty -> .)
    le              reduce using rule 80 (empty -> .)
    ee              reduce using rule 80 (empty -> .)
    ne              reduce using rule 80 (empty -> .)
    and             reduce using rule 80 (empty -> .)
    or              reduce using rule 80 (empty -> .)
    semicolon       reduce using rule 80 (empty -> .)
    rp              reduce using rule 80 (empty -> .)
    comma           reduce using rule 80 (empty -> .)
    rb              reduce using rule 80 (empty -> .)

    SEM_VERIFY_NUM_PARAMS          shift and go to state 272
    empty                          shift and go to state 224

state 269

    (49) EXPRESSION -> NOT SUPEREXP SEM_RESOLVE_NOT and SEM_PUSH_OPERATOR NOT SUPEREXP SEM_RESOLVE_NOT SEM_RESOLVE_ANDOR .

    semicolon       reduce using rule 49 (EXPRESSION -> NOT SUPEREXP SEM_RESOLVE_NOT and SEM_PUSH_OPERATOR NOT SUPEREXP SEM_RESOLVE_NOT SEM_RESOLVE_ANDOR .)
    rp              reduce using rule 49 (EXPRESSION -> NOT SUPEREXP SEM_RESOLVE_NOT and SEM_PUSH_OPERATOR NOT SUPEREXP SEM_RESOLVE_NOT SEM_RESOLVE_ANDOR .)
    comma           reduce using rule 49 (EXPRESSION -> NOT SUPEREXP SEM_RESOLVE_NOT and SEM_PUSH_OPERATOR NOT SUPEREXP SEM_RESOLVE_NOT SEM_RESOLVE_ANDOR .)


state 270

    (98) SEM_RESOLVE_ANDOR -> empty .

    semicolon       reduce using rule 98 (SEM_RESOLVE_ANDOR -> empty .)
    rp              reduce using rule 98 (SEM_RESOLVE_ANDOR -> empty .)
    comma           reduce using rule 98 (SEM_RESOLVE_ANDOR -> empty .)


state 271

    (50) EXPRESSION -> NOT SUPEREXP SEM_RESOLVE_NOT or SEM_PUSH_OPERATOR NOT SUPEREXP SEM_RESOLVE_NOT SEM_RESOLVE_ANDOR .

    semicolon       reduce using rule 50 (EXPRESSION -> NOT SUPEREXP SEM_RESOLVE_NOT or SEM_PUSH_OPERATOR NOT SUPEREXP SEM_RESOLVE_NOT SEM_RESOLVE_ANDOR .)
    rp              reduce using rule 50 (EXPRESSION -> NOT SUPEREXP SEM_RESOLVE_NOT or SEM_PUSH_OPERATOR NOT SUPEREXP SEM_RESOLVE_NOT SEM_RESOLVE_ANDOR .)
    comma           reduce using rule 50 (EXPRESSION -> NOT SUPEREXP SEM_RESOLVE_NOT or SEM_PUSH_OPERATOR NOT SUPEREXP SEM_RESOLVE_NOT SEM_RESOLVE_ANDOR .)


state 272

    (72) CONSTANT -> id SEM_VERIFY_FUNC lp SEM_PUSH_PAREN SEM_GEN_ERA CALLPARAMETERS rp SEM_POP_PAREN SEM_VERIFY_NUM_PARAMS . SEM_GEN_GOSUB_ASSIGN
    (112) SEM_GEN_GOSUB_ASSIGN -> . empty
    (80) empty -> .

    times           reduce using rule 80 (empty -> .)
    divide          reduce using rule 80 (empty -> .)
    plus            reduce using rule 80 (empty -> .)
    minus           reduce using rule 80 (empty -> .)
    gt              reduce using rule 80 (empty -> .)
    ge              reduce using rule 80 (empty -> .)
    lt              reduce using rule 80 (empty -> .)
    le              reduce using rule 80 (empty -> .)
    ee              reduce using rule 80 (empty -> .)
    ne              reduce using rule 80 (empty -> .)
    and             reduce using rule 80 (empty -> .)
    or              reduce using rule 80 (empty -> .)
    semicolon       reduce using rule 80 (empty -> .)
    rp              reduce using rule 80 (empty -> .)
    comma           reduce using rule 80 (empty -> .)
    rb              reduce using rule 80 (empty -> .)

    SEM_GEN_GOSUB_ASSIGN           shift and go to state 273
    empty                          shift and go to state 274

state 273

    (72) CONSTANT -> id SEM_VERIFY_FUNC lp SEM_PUSH_PAREN SEM_GEN_ERA CALLPARAMETERS rp SEM_POP_PAREN SEM_VERIFY_NUM_PARAMS SEM_GEN_GOSUB_ASSIGN .

    times           reduce using rule 72 (CONSTANT -> id SEM_VERIFY_FUNC lp SEM_PUSH_PAREN SEM_GEN_ERA CALLPARAMETERS rp SEM_POP_PAREN SEM_VERIFY_NUM_PARAMS SEM_GEN_GOSUB_ASSIGN .)
    divide          reduce using rule 72 (CONSTANT -> id SEM_VERIFY_FUNC lp SEM_PUSH_PAREN SEM_GEN_ERA CALLPARAMETERS rp SEM_POP_PAREN SEM_VERIFY_NUM_PARAMS SEM_GEN_GOSUB_ASSIGN .)
    plus            reduce using rule 72 (CONSTANT -> id SEM_VERIFY_FUNC lp SEM_PUSH_PAREN SEM_GEN_ERA CALLPARAMETERS rp SEM_POP_PAREN SEM_VERIFY_NUM_PARAMS SEM_GEN_GOSUB_ASSIGN .)
    minus           reduce using rule 72 (CONSTANT -> id SEM_VERIFY_FUNC lp SEM_PUSH_PAREN SEM_GEN_ERA CALLPARAMETERS rp SEM_POP_PAREN SEM_VERIFY_NUM_PARAMS SEM_GEN_GOSUB_ASSIGN .)
    gt              reduce using rule 72 (CONSTANT -> id SEM_VERIFY_FUNC lp SEM_PUSH_PAREN SEM_GEN_ERA CALLPARAMETERS rp SEM_POP_PAREN SEM_VERIFY_NUM_PARAMS SEM_GEN_GOSUB_ASSIGN .)
    ge              reduce using rule 72 (CONSTANT -> id SEM_VERIFY_FUNC lp SEM_PUSH_PAREN SEM_GEN_ERA CALLPARAMETERS rp SEM_POP_PAREN SEM_VERIFY_NUM_PARAMS SEM_GEN_GOSUB_ASSIGN .)
    lt              reduce using rule 72 (CONSTANT -> id SEM_VERIFY_FUNC lp SEM_PUSH_PAREN SEM_GEN_ERA CALLPARAMETERS rp SEM_POP_PAREN SEM_VERIFY_NUM_PARAMS SEM_GEN_GOSUB_ASSIGN .)
    le              reduce using rule 72 (CONSTANT -> id SEM_VERIFY_FUNC lp SEM_PUSH_PAREN SEM_GEN_ERA CALLPARAMETERS rp SEM_POP_PAREN SEM_VERIFY_NUM_PARAMS SEM_GEN_GOSUB_ASSIGN .)
    ee              reduce using rule 72 (CONSTANT -> id SEM_VERIFY_FUNC lp SEM_PUSH_PAREN SEM_GEN_ERA CALLPARAMETERS rp SEM_POP_PAREN SEM_VERIFY_NUM_PARAMS SEM_GEN_GOSUB_ASSIGN .)
    ne              reduce using rule 72 (CONSTANT -> id SEM_VERIFY_FUNC lp SEM_PUSH_PAREN SEM_GEN_ERA CALLPARAMETERS rp SEM_POP_PAREN SEM_VERIFY_NUM_PARAMS SEM_GEN_GOSUB_ASSIGN .)
    and             reduce using rule 72 (CONSTANT -> id SEM_VERIFY_FUNC lp SEM_PUSH_PAREN SEM_GEN_ERA CALLPARAMETERS rp SEM_POP_PAREN SEM_VERIFY_NUM_PARAMS SEM_GEN_GOSUB_ASSIGN .)
    or              reduce using rule 72 (CONSTANT -> id SEM_VERIFY_FUNC lp SEM_PUSH_PAREN SEM_GEN_ERA CALLPARAMETERS rp SEM_POP_PAREN SEM_VERIFY_NUM_PARAMS SEM_GEN_GOSUB_ASSIGN .)
    semicolon       reduce using rule 72 (CONSTANT -> id SEM_VERIFY_FUNC lp SEM_PUSH_PAREN SEM_GEN_ERA CALLPARAMETERS rp SEM_POP_PAREN SEM_VERIFY_NUM_PARAMS SEM_GEN_GOSUB_ASSIGN .)
    rp              reduce using rule 72 (CONSTANT -> id SEM_VERIFY_FUNC lp SEM_PUSH_PAREN SEM_GEN_ERA CALLPARAMETERS rp SEM_POP_PAREN SEM_VERIFY_NUM_PARAMS SEM_GEN_GOSUB_ASSIGN .)
    comma           reduce using rule 72 (CONSTANT -> id SEM_VERIFY_FUNC lp SEM_PUSH_PAREN SEM_GEN_ERA CALLPARAMETERS rp SEM_POP_PAREN SEM_VERIFY_NUM_PARAMS SEM_GEN_GOSUB_ASSIGN .)
    rb              reduce using rule 72 (CONSTANT -> id SEM_VERIFY_FUNC lp SEM_PUSH_PAREN SEM_GEN_ERA CALLPARAMETERS rp SEM_POP_PAREN SEM_VERIFY_NUM_PARAMS SEM_GEN_GOSUB_ASSIGN .)


state 274

    (112) SEM_GEN_GOSUB_ASSIGN -> empty .

    times           reduce using rule 112 (SEM_GEN_GOSUB_ASSIGN -> empty .)
    divide          reduce using rule 112 (SEM_GEN_GOSUB_ASSIGN -> empty .)
    plus            reduce using rule 112 (SEM_GEN_GOSUB_ASSIGN -> empty .)
    minus           reduce using rule 112 (SEM_GEN_GOSUB_ASSIGN -> empty .)
    gt              reduce using rule 112 (SEM_GEN_GOSUB_ASSIGN -> empty .)
    ge              reduce using rule 112 (SEM_GEN_GOSUB_ASSIGN -> empty .)
    lt              reduce using rule 112 (SEM_GEN_GOSUB_ASSIGN -> empty .)
    le              reduce using rule 112 (SEM_GEN_GOSUB_ASSIGN -> empty .)
    ee              reduce using rule 112 (SEM_GEN_GOSUB_ASSIGN -> empty .)
    ne              reduce using rule 112 (SEM_GEN_GOSUB_ASSIGN -> empty .)
    and             reduce using rule 112 (SEM_GEN_GOSUB_ASSIGN -> empty .)
    or              reduce using rule 112 (SEM_GEN_GOSUB_ASSIGN -> empty .)
    semicolon       reduce using rule 112 (SEM_GEN_GOSUB_ASSIGN -> empty .)
    rp              reduce using rule 112 (SEM_GEN_GOSUB_ASSIGN -> empty .)
    comma           reduce using rule 112 (SEM_GEN_GOSUB_ASSIGN -> empty .)
    rb              reduce using rule 112 (SEM_GEN_GOSUB_ASSIGN -> empty .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for dot in state 86 resolved as shift
